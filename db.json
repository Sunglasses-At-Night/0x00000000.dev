{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"source/images/ArcApellago.jpg","path":"images/ArcApellago.jpg","modified":1,"renderable":0},{"_id":"source/images/ArcApellagoImGUI.png","path":"images/ArcApellagoImGUI.png","modified":1,"renderable":0},{"_id":"source/images/ChunkComponents.png","path":"images/ChunkComponents.png","modified":1,"renderable":0},{"_id":"source/images/ChunkLoadingDistances.png","path":"images/ChunkLoadingDistances.png","modified":1,"renderable":0},{"_id":"source/images/CubeMarchingLOD1.png","path":"images/CubeMarchingLOD1.png","modified":1,"renderable":0},{"_id":"source/images/CubeMarchingLOD2.png","path":"images/CubeMarchingLOD2.png","modified":1,"renderable":0},{"_id":"source/images/CubeMarchingLOD4.png","path":"images/CubeMarchingLOD4.png","modified":1,"renderable":0},{"_id":"source/images/CubeMarchingSculpting.webm","path":"images/CubeMarchingSculpting.webm","modified":1,"renderable":0},{"_id":"source/images/DeltaBlade2700.jpg","path":"images/DeltaBlade2700.jpg","modified":1,"renderable":0},{"_id":"source/images/EditorMode.webm","path":"images/EditorMode.webm","modified":1,"renderable":0},{"_id":"source/images/ImGUIStatsBlock.png","path":"images/ImGUIStatsBlock.png","modified":1,"renderable":0},{"_id":"source/images/ImGUIWindow.png","path":"images/ImGUIWindow.png","modified":1,"renderable":0},{"_id":"source/images/ImGUIWindowBlocks.png","path":"images/ImGUIWindowBlocks.png","modified":1,"renderable":0},{"_id":"source/images/ImGUIWindowSmall.png","path":"images/ImGUIWindowSmall.png","modified":1,"renderable":0},{"_id":"source/images/LODNoisySphere.png","path":"images/LODNoisySphere.png","modified":1,"renderable":0},{"_id":"source/images/LODSmoothSphere.png","path":"images/LODSmoothSphere.png","modified":1,"renderable":0},{"_id":"source/images/MarchingCubesConfigs.png","path":"images/MarchingCubesConfigs.png","modified":1,"renderable":0},{"_id":"source/images/MarchingCubesDensityGradient.png","path":"images/MarchingCubesDensityGradient.png","modified":1,"renderable":0},{"_id":"source/images/MarchingCubesDensityGradientEnhanced.png","path":"images/MarchingCubesDensityGradientEnhanced.png","modified":1,"renderable":0},{"_id":"source/images/MarchingCubesInterpolation.png","path":"images/MarchingCubesInterpolation.png","modified":1,"renderable":0},{"_id":"source/images/MarchingExample.png","path":"images/MarchingExample.png","modified":1,"renderable":0},{"_id":"source/images/MarchingExampleSmooth.png","path":"images/MarchingExampleSmooth.png","modified":1,"renderable":0},{"_id":"source/images/TerrainChunkPriorityLoading.webm","path":"images/TerrainChunkPriorityLoading.webm","modified":1,"renderable":0},{"_id":"source/images/TerrainChunkPriorityLoadingUnloading.webm","path":"images/TerrainChunkPriorityLoadingUnloading.webm","modified":1,"renderable":0},{"_id":"source/images/TerrainManagerFlowChart.png","path":"images/TerrainManagerFlowChart.png","modified":1,"renderable":0},{"_id":"source/images/TerrainManagerFlowChartChunkLoader.png","path":"images/TerrainManagerFlowChartChunkLoader.png","modified":1,"renderable":0},{"_id":"source/images/TerrainManagerFlowChartRequestChunk.png","path":"images/TerrainManagerFlowChartRequestChunk.png","modified":1,"renderable":0},{"_id":"source/images/TerrainManagerFlowChartTerrainSerializer.png","path":"images/TerrainManagerFlowChartTerrainSerializer.png","modified":1,"renderable":0},{"_id":"source/images/TerrainManagerJobSystem.png","path":"images/TerrainManagerJobSystem.png","modified":1,"renderable":0},{"_id":"source/images/VoxelManipulation.webm","path":"images/VoxelManipulation.webm","modified":1,"renderable":0},{"_id":"source/images/VoxelTearing.png","path":"images/VoxelTearing.png","modified":1,"renderable":0},{"_id":"source/images/mvc.png","path":"images/mvc.png","modified":1,"renderable":0},{"_id":"source/images/ModularImGUI/ArcApellagoImGUI.png","path":"images/ModularImGUI/ArcApellagoImGUI.png","modified":1,"renderable":0},{"_id":"source/images/ModularImGUI/ImGUIStatsBlock.png","path":"images/ModularImGUI/ImGUIStatsBlock.png","modified":1,"renderable":0},{"_id":"source/images/ModularImGUI/ImGUIWindow.png","path":"images/ModularImGUI/ImGUIWindow.png","modified":1,"renderable":0},{"_id":"source/images/ModularImGUI/ImGUIWindowBlocks.png","path":"images/ModularImGUI/ImGUIWindowBlocks.png","modified":1,"renderable":0},{"_id":"source/images/ModularImGUI/ImGUIWindowSmall.png","path":"images/ModularImGUI/ImGUIWindowSmall.png","modified":1,"renderable":0},{"_id":"themes/Alien/source/favicon.ico","path":"favicon.ico","modified":1,"renderable":1},{"_id":"themes/Alien/source/css/base.styl","path":"css/base.styl","modified":1,"renderable":1},{"_id":"themes/Alien/source/css/custom.styl","path":"css/custom.styl","modified":1,"renderable":1},{"_id":"themes/Alien/source/css/font.styl","path":"css/font.styl","modified":1,"renderable":1},{"_id":"themes/Alien/source/css/layout.styl","path":"css/layout.styl","modified":1,"renderable":1},{"_id":"themes/Alien/source/css/media.styl","path":"css/media.styl","modified":1,"renderable":1},{"_id":"themes/Alien/source/css/normalize.styl","path":"css/normalize.styl","modified":1,"renderable":1},{"_id":"themes/Alien/source/css/spectre-exp.min.css","path":"css/spectre-exp.min.css","modified":1,"renderable":1},{"_id":"themes/Alien/source/css/spectre-icons.min.css","path":"css/spectre-icons.min.css","modified":1,"renderable":1},{"_id":"themes/Alien/source/css/spectre.min.css","path":"css/spectre.min.css","modified":1,"renderable":1},{"_id":"themes/Alien/source/css/style.styl","path":"css/style.styl","modified":1,"renderable":1},{"_id":"themes/Alien/source/css/variable.styl","path":"css/variable.styl","modified":1,"renderable":1},{"_id":"themes/Alien/source/js/debug.log","path":"js/debug.log","modified":1,"renderable":1},{"_id":"themes/Alien/source/js/mathjax2.7.5.js","path":"js/mathjax2.7.5.js","modified":1,"renderable":1},{"_id":"themes/Alien/source/js/script.js","path":"js/script.js","modified":1,"renderable":1},{"_id":"themes/Alien/source/js/tocbot.min.js","path":"js/tocbot.min.js","modified":1,"renderable":1},{"_id":"themes/Alien/source/fonts/iconfont/demo.css","path":"fonts/iconfont/demo.css","modified":1,"renderable":1},{"_id":"themes/Alien/source/fonts/iconfont/demo_index.html","path":"fonts/iconfont/demo_index.html","modified":1,"renderable":1},{"_id":"themes/Alien/source/fonts/iconfont/iconfont.css","path":"fonts/iconfont/iconfont.css","modified":1,"renderable":1},{"_id":"themes/Alien/source/fonts/iconfont/iconfont.eot","path":"fonts/iconfont/iconfont.eot","modified":1,"renderable":1},{"_id":"themes/Alien/source/fonts/iconfont/iconfont.js","path":"fonts/iconfont/iconfont.js","modified":1,"renderable":1},{"_id":"themes/Alien/source/fonts/iconfont/iconfont.json","path":"fonts/iconfont/iconfont.json","modified":1,"renderable":1},{"_id":"themes/Alien/source/fonts/iconfont/iconfont.svg","path":"fonts/iconfont/iconfont.svg","modified":1,"renderable":1},{"_id":"themes/Alien/source/fonts/iconfont/iconfont.ttf","path":"fonts/iconfont/iconfont.ttf","modified":1,"renderable":1},{"_id":"themes/Alien/source/fonts/iconfont/iconfont.woff","path":"fonts/iconfont/iconfont.woff","modified":1,"renderable":1},{"_id":"themes/Alien/source/fonts/iconfont/iconfont.woff2","path":"fonts/iconfont/iconfont.woff2","modified":1,"renderable":1},{"_id":"themes/Alien/source/fonts/lanting/lanting.TTF","path":"fonts/lanting/lanting.TTF","modified":1,"renderable":1},{"_id":"themes/Alien/source/fonts/lanting/lanting.eot","path":"fonts/lanting/lanting.eot","modified":1,"renderable":1},{"_id":"themes/Alien/source/fonts/lanting/lanting.otf","path":"fonts/lanting/lanting.otf","modified":1,"renderable":1},{"_id":"themes/Alien/source/fonts/lanting/lanting.woff","path":"fonts/lanting/lanting.woff","modified":1,"renderable":1},{"_id":"themes/Alien/source/fonts/lanting/lanting.woff2","path":"fonts/lanting/lanting.woff2","modified":1,"renderable":1}],"Cache":[{"_id":"source/_posts/_amongus-mumble.md","hash":"1842cc462f42777dfe5b30335b91457613bf5359","modified":1611816532333},{"_id":"source/_posts/_copyMe.md","hash":"df7e6d5e1978be66f5ec0e766f6bfdf06dad36b6","modified":1611816532333},{"_id":"source/_posts/_hello-world.md","hash":"9fc6808d94792536b69cb629d2c533ec6f3e56df","modified":1611816532333},{"_id":"source/_posts/blog.md","hash":"4a3c4a442243d75037ca3f137d3cec34e4e5c9f4","modified":1611816532333},{"_id":"source/_posts/modular-imgui.md","hash":"18101b7e9be4d88bb959d88c7cb43107fddd0ddc","modified":1611816533845},{"_id":"source/_posts/terrain-generation.md","hash":"3bcaa94b91b3db86eb75ed3a4a8822592b628e7f","modified":1611816532333},{"_id":"source/_posts/why_mvc.md","hash":"83b1e0e554fc6b620a11fa7a652e8f9eada8c58e","modified":1611816533845},{"_id":"source/images/ArcApellago.jpg","hash":"8806cf1bfaae21937138e40597dc064824738f7f","modified":1611816532337},{"_id":"source/images/ChunkComponents.png","hash":"8746577879c40dffe933f4b2df5747c159ad76e3","modified":1611816532337},{"_id":"source/images/ChunkLoadingDistances.png","hash":"b036ca690211b6f09ca4dbabd917b27c33844c5c","modified":1611816532337},{"_id":"source/images/CubeMarchingLOD1.png","hash":"0df67d18bb220a405d546680ad468aa81d15b7e6","modified":1611816532337},{"_id":"source/images/CubeMarchingLOD2.png","hash":"c52e5aa63733f0fba9cd3290acfdf63aa87c6e7d","modified":1611816532337},{"_id":"source/images/CubeMarchingLOD4.png","hash":"43bd4f61010c74d09bb17ac60c51496cc136f4a7","modified":1611816532337},{"_id":"source/images/DeltaBlade2700.jpg","hash":"828814b19b50d3d751e40a0be5fc5e26663a24c0","modified":1611816532341},{"_id":"source/images/ImGUIStatsBlock.png","hash":"e44ae41ef866e58185b68efd45a54fa99b03e3c7","modified":1611816533829},{"_id":"source/images/ImGUIWindow.png","hash":"8629781e04a2bee8bc0208c8d6a4540b8bdf8c24","modified":1611816533829},{"_id":"source/images/ImGUIWindowBlocks.png","hash":"faf849e86c6767fc6bf7e4d5c529e0edafd4b0c6","modified":1611816533829},{"_id":"source/images/ImGUIWindowSmall.png","hash":"9e1ba31eb6950b01a14e0276bc5683d335c36006","modified":1611816533829},{"_id":"source/images/MarchingCubesInterpolation.png","hash":"80d328c70d51b64ae1f5a624f7f69e664cac9f9c","modified":1611816532341},{"_id":"source/images/TerrainManagerFlowChartChunkLoader.png","hash":"89fa2c72bf3a41ab24117b353b49db0e2fa7595a","modified":1611816532349},{"_id":"source/images/TerrainManagerFlowChartRequestChunk.png","hash":"170b12ee510bec311b7ae752553b9b88e5c8ec8f","modified":1611816532349},{"_id":"source/images/TerrainManagerFlowChartTerrainSerializer.png","hash":"978306b982113ffada9e2b158384eda6f50d47ee","modified":1611816532349},{"_id":"source/images/mvc.png","hash":"140b05c570ad102d21138d020e2b9c15d8d53335","modified":1611816534021},{"_id":"source/tags/index.md","hash":"a8a54d146f97a141d651e856eea76fa870db619a","modified":1611816533829},{"_id":"source/images/ModularImGUI/ImGUIStatsBlock.png","hash":"e44ae41ef866e58185b68efd45a54fa99b03e3c7","modified":1611816532345},{"_id":"source/images/ModularImGUI/ImGUIWindow.png","hash":"8629781e04a2bee8bc0208c8d6a4540b8bdf8c24","modified":1611816532345},{"_id":"source/images/ModularImGUI/ImGUIWindowBlocks.png","hash":"faf849e86c6767fc6bf7e4d5c529e0edafd4b0c6","modified":1611816532345},{"_id":"source/images/ModularImGUI/ImGUIWindowSmall.png","hash":"9e1ba31eb6950b01a14e0276bc5683d335c36006","modified":1611816532345},{"_id":"source/images/LODSmoothSphere.png","hash":"e1cf16f88bca167c2b936ebc89a629b5436277cf","modified":1611816532341},{"_id":"source/images/MarchingCubesDensityGradient.png","hash":"1057e99a78cf0c70d869027d2a493f1714a554ff","modified":1611816532341},{"_id":"source/images/MarchingCubesDensityGradientEnhanced.png","hash":"84b5256fa9e35267cdcba5878f841019be6c398b","modified":1611816532341},{"_id":"source/images/MarchingExampleSmooth.png","hash":"22bf57f76f4d04e7c0440b7a35417d63ea85b5bf","modified":1611816532341},{"_id":"source/images/TerrainManagerFlowChart.png","hash":"0e1b5a8a7364f11598b2cc10c63751c38d2ccb50","modified":1611816532349},{"_id":"source/images/VoxelTearing.png","hash":"f059fc36f912bf20792c10bdce35d2697a3567f7","modified":1611816532353},{"_id":"source/images/LODNoisySphere.png","hash":"fa2667f47ed1ecf1da8de0d8ae0b81a9cd12d241","modified":1611816532341},{"_id":"source/images/MarchingCubesConfigs.png","hash":"cd24f63593bd4fa91a3328ab9e25faaf5a7aeccd","modified":1611816532341},{"_id":"source/images/MarchingExample.png","hash":"f3778c6da30276c650419daa20d9a81e7d3df69a","modified":1611816532341},{"_id":"source/images/CubeMarchingSculpting.webm","hash":"f9a406560a5f3f8809ab8916aaffc9a6fa393853","modified":1611816532341},{"_id":"source/images/TerrainManagerJobSystem.png","hash":"8c6ce722c252f802e73a0428ffca4080f7e87f51","modified":1611816532353},{"_id":"source/images/EditorMode.webm","hash":"28b2a904175e889baafd4f5fe5e0d488f6f8dee2","modified":1611816532341},{"_id":"themes/Alien/ChangeLogs.md","hash":"fab83fcf3eda5cc5b4a6092554e4c57b3a36630e","modified":1611816533829},{"_id":"themes/Alien/LICENSE.md","hash":"632b916dd7e4f5c11790ab808388cda6610210ed","modified":1611816533829},{"_id":"themes/Alien/README-CN.md","hash":"e0b616b7546d05a50bd7bf046858af8e221fd0fc","modified":1611816533829},{"_id":"themes/Alien/README.md","hash":"b33e7d4a20dde46667050db2fb14c783fcd1a6c7","modified":1611816533829},{"_id":"themes/Alien/_config.yml","hash":"117a1d9af5659b29db3048053c7db960701266ed","modified":1611816533829},{"_id":"themes/Alien/debug.log","hash":"ffed76e463fb5e27391b02778ce3bd1ac749f310","modified":1611816533829},{"_id":"themes/Alien/package.json","hash":"55d477f0e6c76fa767b782ca0f5e0fede8d2ea28","modified":1611816533829},{"_id":"themes/Alien/languages/de.yml","hash":"d45cea36c5c83d7d09afcd1c26fff4a4c513c25b","modified":1611816533829},{"_id":"themes/Alien/languages/default.yml","hash":"f26a34a7983d4bc17c65c7f0f14da598e62ce66d","modified":1611816533829},{"_id":"themes/Alien/languages/es.yml","hash":"e3b4937da4cd2d0393b8a0ba310e70fc605cc431","modified":1611816533829},{"_id":"themes/Alien/languages/fr.yml","hash":"8cb0fe4b6913b4d5b662cdd0108a923c90025f85","modified":1611816533829},{"_id":"themes/Alien/languages/ja.yml","hash":"3e2fedca096678c0c234ebffa4637828979296fa","modified":1611816533829},{"_id":"themes/Alien/languages/ko.yml","hash":"11330316e3c1262474a2b496e40dbc29f93fe01b","modified":1611816533829},{"_id":"themes/Alien/languages/nl.yml","hash":"3d82ec703d0b3287739d7cb4750a715ae83bfcb3","modified":1611816533829},{"_id":"themes/Alien/languages/no.yml","hash":"ddf2035e920a5ecb9076138c184257d9f51896a7","modified":1611816533829},{"_id":"themes/Alien/languages/pt.yml","hash":"ae2c61b30e638f74f1a42c9ce39ac08d063b30f5","modified":1611816533829},{"_id":"themes/Alien/languages/ru.yml","hash":"2a476b4c6e04900914c81378941640ac5d58a1f0","modified":1611816533829},{"_id":"themes/Alien/languages/zh-CN.yml","hash":"b057f389c6713010f97d461e48ec959b0b6f3b44","modified":1611816533829},{"_id":"themes/Alien/languages/zh-TW.yml","hash":"f5f0ca88185da7a8457760d84bf221781473bd7c","modified":1611816533829},{"_id":"themes/Alien/layout/archive.ejs","hash":"48cdf67b628eb6a1c24d484ed252f5b0e3f06ddf","modified":1611816532353},{"_id":"themes/Alien/layout/debug.log","hash":"a5598c660d9c9743795bbe41f975032bad2137a4","modified":1611816533829},{"_id":"themes/Alien/layout/index.ejs","hash":"b44f40dd5b866e1d6a840654aa8323054f061dac","modified":1611816533829},{"_id":"themes/Alien/layout/layout.ejs","hash":"27bf16cff75707df7cbacacd815c4d5e1a4e8412","modified":1611816533829},{"_id":"themes/Alien/layout/page.ejs","hash":"92c2d419faea7ec7d984a3d960f5668608d36842","modified":1611816533829},{"_id":"themes/Alien/layout/post.ejs","hash":"a23f83d6c559ce88588472267468a54488d50e8e","modified":1611816532353},{"_id":"themes/Alien/layout/tag.ejs","hash":"cb23ac7b9632fbbea5c48124e3d83cee3b01a615","modified":1611816533829},{"_id":"themes/Alien/scripts/imageTag.js","hash":"21c67e132584333eaa7b0c015fdd37d2e56ea934","modified":1611816533829},{"_id":"themes/Alien/source/favicon.ico","hash":"d686f9285ef682640bfce8ad2a891ef978814096","modified":1611816532357},{"_id":"themes/Alien/layout/_page/archive.ejs","hash":"dc3bb85971236034f75f3d5d6c75c25fe9000b63","modified":1611816533829},{"_id":"themes/Alien/layout/_page/debug.log","hash":"ff9a3e5d85a910bd1f6fba03e76b5b149e91dc1f","modified":1611816533829},{"_id":"themes/Alien/layout/_page/page.ejs","hash":"90559c37712ec3d7cdd58ad15d14d5662816bce1","modified":1611816533829},{"_id":"themes/Alien/layout/_page/post.ejs","hash":"4bd572826e99c9cd4b9b839f9898efa6354f9602","modified":1611816533829},{"_id":"themes/Alien/layout/_page/profile.ejs","hash":"13668d3490aa4084296f7d1c2deaf8d329964325","modified":1611816533829},{"_id":"themes/Alien/layout/_page/tag.ejs","hash":"9146f843c2c3ba173b8f8bd10998bc9f871c0b7e","modified":1611816533829},{"_id":"themes/Alien/layout/_partial/debug.log","hash":"44fcf577a39a6e51ff5ead1544e525ff764687c8","modified":1611816533829},{"_id":"themes/Alien/layout/_partial/footer.ejs","hash":"a34899845ff256e649cef2d6a6d3fac70299c305","modified":1611816533829},{"_id":"themes/Alien/layout/_partial/head.ejs","hash":"d91a685f0981e10c7e7775f8fa3ae15b623475d6","modified":1611816533829},{"_id":"themes/Alien/layout/_partial/header.ejs","hash":"a685df9dff3b9d1cb076bec626501e3ee5bd4701","modified":1611816533829},{"_id":"themes/Alien/layout/_partial/paginator.ejs","hash":"8ad8d7752378f71708ce9d25e19f06f316eacce0","modified":1611816533829},{"_id":"themes/Alien/layout/_partial/toc.ejs","hash":"ced91b79bfa99e4141b3e37e3ac22648729474d2","modified":1611816533829},{"_id":"themes/Alien/layout/_plugins/debug.log","hash":"cd804a9b5d1083ae01b9692a8f8c25a1af40fc6c","modified":1611816533829},{"_id":"themes/Alien/source/css/custom.styl","hash":"b3a9aebdab56153978bb4127cacab82ad25a6b29","modified":1611816533833},{"_id":"themes/Alien/source/css/font.styl","hash":"9df612c7773050b99d2e281f1a6ff21db45d5d25","modified":1611816533833},{"_id":"themes/Alien/source/css/layout.styl","hash":"e4fb8849749a5dca8adc7b1229d00e580db55239","modified":1611816533833},{"_id":"themes/Alien/source/css/media.styl","hash":"938e549f9e19e00845bc81e0ed3a73b703a31e92","modified":1611816533833},{"_id":"themes/Alien/source/css/normalize.styl","hash":"e6cc05d03781428c58c658d287362d7f8b47c592","modified":1611816533833},{"_id":"themes/Alien/source/css/spectre-exp.min.css","hash":"c6ee3f761820f3c48295a7f612d360091b1b5ee0","modified":1611816532357},{"_id":"themes/Alien/source/css/spectre-icons.min.css","hash":"cc340000ffa5de5dde825a9b2bfe5ece668f3808","modified":1611816532357},{"_id":"themes/Alien/source/css/spectre.min.css","hash":"810d3b7c257cd91e2eff74176aa0635f0abcc7ef","modified":1611816532357},{"_id":"themes/Alien/source/css/style.styl","hash":"1b4acc44299c8020a26fdb3070528fca5096c08f","modified":1611816533833},{"_id":"themes/Alien/source/css/variable.styl","hash":"b419b02393b232e5e5de4f47baf99a420f422910","modified":1611816533833},{"_id":"themes/Alien/source/js/debug.log","hash":"3aa8b8aa07404158ab7c7b497009278b52d86305","modified":1611816533833},{"_id":"themes/Alien/source/js/mathjax2.7.5.js","hash":"fd54df22584629c604511acf67c9e992d362a5e3","modified":1611816533837},{"_id":"themes/Alien/source/js/script.js","hash":"2ad0c43c86bf6fd9baede6472c850590dd2b2f91","modified":1611816533837},{"_id":"themes/Alien/source/js/tocbot.min.js","hash":"bae97e8a24a05a99335f8e725641c8ca9c50502a","modified":1611816532425},{"_id":"themes/Alien/source/css/_highlight/agate.styl","hash":"fc289ba8f47ead6331ec3a51533cfa93251c5634","modified":1611816533829},{"_id":"themes/Alien/source/css/_highlight/androidstudio.styl","hash":"4d67bdab6cc9c614486ca42f98199a04d053e7f0","modified":1611816533829},{"_id":"themes/Alien/source/css/_highlight/arduino-light.styl","hash":"591962bfc758a521b4cb907750c19a1a2423b4d5","modified":1611816533833},{"_id":"themes/Alien/source/css/_highlight/arta.styl","hash":"262167aaebcf28de7f85af7ac77a76fa1fa284f7","modified":1611816533833},{"_id":"themes/Alien/source/css/_highlight/ascetic.styl","hash":"ca087a3c70998c7ac6b0b42d5cf7a653b8707591","modified":1611816533833},{"_id":"themes/Alien/source/css/_highlight/atelier-cave-dark.styl","hash":"7e83c7f2acaaaa98864660afe2794745c36c8e51","modified":1611816533833},{"_id":"themes/Alien/source/css/_highlight/atelier-cave-light.styl","hash":"f47de0b9d66617728f68096ed48371dd6bb9e67a","modified":1611816533833},{"_id":"themes/Alien/source/css/_highlight/atelier-dune-dark.styl","hash":"68584ed0e99c7d0e49ef8a2e67cd4dcdad359de4","modified":1611816533833},{"_id":"themes/Alien/source/css/_highlight/atelier-dune-light.styl","hash":"657fe215931fd06e21b56374df699a94890f7ab4","modified":1611816533833},{"_id":"themes/Alien/source/css/_highlight/atelier-estuary-dark.styl","hash":"1cecd13e0d6b24042ff86372f0596c1441bb834a","modified":1611816533833},{"_id":"themes/Alien/source/css/_highlight/atelier-estuary-light.styl","hash":"2b416a0567a53aa0fa8898b196ddd44315c1a5f3","modified":1611816533833},{"_id":"themes/Alien/source/css/_highlight/atelier-forest-dark.styl","hash":"a741eba35cdfe2cfd67dfbf109655f253d6b4795","modified":1611816533833},{"_id":"themes/Alien/source/css/_highlight/atelier-forest-light.styl","hash":"8d7c7242974aa2454fa792c5d7a47c5f9632355a","modified":1611816533833},{"_id":"themes/Alien/source/css/_highlight/atelier-heath-dark.styl","hash":"f186b357dcebded89b7bcc77389b2cff76533d72","modified":1611816533833},{"_id":"themes/Alien/source/css/_highlight/atelier-heath-light.styl","hash":"c1db353e8613607580d40b12ddc162d029560576","modified":1611816533833},{"_id":"themes/Alien/source/css/_highlight/atelier-lakeside-dark.styl","hash":"802979cea895a0a384645cb30a43de9572cb0e3f","modified":1611816533833},{"_id":"themes/Alien/source/css/_highlight/atelier-lakeside-light.styl","hash":"8659eaae6a0c2e00b4b9199803e50adf4ff0128d","modified":1611816533833},{"_id":"themes/Alien/source/css/_highlight/atelier-plateau-dark.styl","hash":"0d51ddc580ccb0a291271fa9632bc91dab632df6","modified":1611816533833},{"_id":"themes/Alien/source/css/_highlight/atelier-plateau-light.styl","hash":"96181544eeadc5b0749229f11607e7c01f81e078","modified":1611816533833},{"_id":"themes/Alien/source/css/_highlight/atelier-savanna-dark.styl","hash":"bbad7a9512b4873294e73ce806e36e43973e6ed8","modified":1611816533833},{"_id":"themes/Alien/source/css/_highlight/atelier-savanna-light.styl","hash":"8a5207a0c30262a0bf5e1a41411a306f7a89a7e7","modified":1611816533833},{"_id":"themes/Alien/source/css/_highlight/atelier-seaside-dark.styl","hash":"2f008271299042f2443bca98c9bcadbc8c45e837","modified":1611816533833},{"_id":"themes/Alien/source/css/_highlight/atelier-seaside-light.styl","hash":"08e2df313c272d5c70c93e713639663c168180d0","modified":1611816533833},{"_id":"themes/Alien/source/css/_highlight/atelier-sulphurpool-dark.styl","hash":"18dcb00ab9c62eb810d492047214331c51bb654f","modified":1611816533833},{"_id":"themes/Alien/source/css/_highlight/brown-paper.styl","hash":"e45a5e2ae53c90334e9bc8be1e45f3c3aa3d785d","modified":1611816533833},{"_id":"themes/Alien/source/css/_highlight/brown-papersq.png","hash":"3a1332ede3a75a3d24f60b6ed69035b72da5e182","modified":1611816532357},{"_id":"themes/Alien/source/css/_highlight/codepen-embed.styl","hash":"1de45e603e2c71c7f6b0c1372a3ba00b1bc153a8","modified":1611816533833},{"_id":"themes/Alien/source/css/_highlight/color-brewer.styl","hash":"9c4905eab730d0b389e6972e907057577f7e25f1","modified":1611816533833},{"_id":"themes/Alien/source/css/_highlight/dark.styl","hash":"98d7884806838a0b46132d759d60ac27c0c4bd9c","modified":1611816533833},{"_id":"themes/Alien/layout/_plugins/mathjax.ejs","hash":"56722622edf8cb6e7bb138ad1d0329e2125d9c38","modified":1611816533829},{"_id":"themes/Alien/source/css/_highlight/docco.styl","hash":"7bd3389ce16d20488ab336d557056cc703c921c7","modified":1611816533833},{"_id":"themes/Alien/source/css/_highlight/far.styl","hash":"8da83d66724f2ce508a40f21b4f6dc0d704be562","modified":1611816533833},{"_id":"themes/Alien/source/css/_highlight/foundation.styl","hash":"28c59a31467c33bd51cbf3b6085782c2a724ff6c","modified":1611816533833},{"_id":"themes/Alien/source/css/_highlight/github-gist.styl","hash":"71f4b0fca91a587e6eba15a5306dca963bb8f441","modified":1611816533833},{"_id":"themes/Alien/source/css/_highlight/github.styl","hash":"a84eb710b302006120c3e7f8ca18f9e6fbc231c3","modified":1611816533833},{"_id":"themes/Alien/source/css/_highlight/googlecode.styl","hash":"7f5082ae008925a23eb713f160773fe647eb3ff7","modified":1611816533833},{"_id":"themes/Alien/source/css/_highlight/grayscale.styl","hash":"c83804abe39faebd80f8f4ff64fbd7137674cb1c","modified":1611816533833},{"_id":"themes/Alien/source/css/_highlight/gruvbox-dark.styl","hash":"f66403ce77dcb16b1f98a5061b72f7581630d69f","modified":1611816533833},{"_id":"themes/Alien/source/css/_highlight/highlightjs.styl","hash":"5bf98e2f18cbab306371fc8cc6b3ab02c7de33ca","modified":1611816533833},{"_id":"themes/Alien/source/css/_highlight/hopscotch.styl","hash":"dd3c78c42d4a865f11623235e5e5f6829d789706","modified":1611816533833},{"_id":"themes/Alien/source/css/_highlight/hybrid.styl","hash":"4906456025787de04b48a87c42bb704c5ff67065","modified":1611816533833},{"_id":"themes/Alien/source/css/_highlight/idea.styl","hash":"e284c1760e8da0848f56cd5601d867ceeb0192d7","modified":1611816533833},{"_id":"themes/Alien/source/css/_highlight/index.styl","hash":"36c44375229613a5bb9ee84a8e90214978070439","modified":1611816533833},{"_id":"themes/Alien/source/css/_highlight/ir-black.styl","hash":"aa31b30069ebee39e2c3ebb75e2c96ba8678eb14","modified":1611816533833},{"_id":"themes/Alien/source/css/_highlight/kimbie.dark.styl","hash":"3b998c640eeb2c6192fee24bc78b4137de475dd7","modified":1611816533833},{"_id":"themes/Alien/source/css/_highlight/kimbie.light.styl","hash":"e901738455ec9a1bddde7b62bbd8595de6033e1e","modified":1611816533833},{"_id":"themes/Alien/source/css/_highlight/kimbie.styl","hash":"13113af220dfed09cb49d85102babb352c3eff97","modified":1611816533833},{"_id":"themes/Alien/source/css/_highlight/darkula.styl","hash":"8965ad6920601c275ca97e617beff5536925a266","modified":1611816533833},{"_id":"themes/Alien/source/css/_highlight/atelier-sulphurpool-light.styl","hash":"add3d88c9d12567dcfae7a8e49984d119fc72227","modified":1611816533833},{"_id":"themes/Alien/source/css/_highlight/magula.styl","hash":"ab179306c12a1cf2949482beaca328e379ef034a","modified":1611816533833},{"_id":"themes/Alien/source/css/_highlight/monokai.styl","hash":"c3a3bfae1eb864505fbc8748db734600057af1af","modified":1611816533833},{"_id":"themes/Alien/source/css/_highlight/obsidian.styl","hash":"efba069860181d2b709e1548dd16cf102ca267fa","modified":1611816533833},{"_id":"themes/Alien/source/css/_highlight/paraiso-dark.styl","hash":"50f1cee8a5b3b165b4184ead0a99dc564b62ef4f","modified":1611816533833},{"_id":"themes/Alien/source/css/_highlight/paraiso-light.styl","hash":"e428e8202b01e83b0f018a96058d806e7f4c76bf","modified":1611816533833},{"_id":"themes/Alien/source/css/_highlight/paraiso.styl","hash":"846a06a57fa0b3db7f83ec7ac2bf34911f32cf66","modified":1611816533833},{"_id":"themes/Alien/source/css/_highlight/pojoaque.jpg","hash":"c5fe6533b88b21f8d90d3d03954c6b29baa67791","modified":1611816532357},{"_id":"themes/Alien/source/css/_highlight/pojoaque.styl","hash":"37436c1018394f799a1f3dfd326309da8df89742","modified":1611816533833},{"_id":"themes/Alien/source/css/_highlight/railscasts.styl","hash":"5dc9ce33cecee87fe9ca8f2ed9342602194484ec","modified":1611816533833},{"_id":"themes/Alien/source/css/_highlight/rainbow.styl","hash":"95246afef181bd96f9adb1a2e84fb3ef302d4598","modified":1611816533833},{"_id":"themes/Alien/source/css/_highlight/school-book.png","hash":"711ec983c874e093bb89eb77afcbdf6741fa61ee","modified":1611816532357},{"_id":"themes/Alien/source/css/_highlight/school-book.styl","hash":"6d685307f4362d3b2b0868f7b0a94b930db66e6a","modified":1611816533833},{"_id":"themes/Alien/source/css/_highlight/solarized-dark.styl","hash":"9fc9400d3a8cae97eb5761c284140acb0f847538","modified":1611816533833},{"_id":"themes/Alien/source/css/_highlight/solarized-light.styl","hash":"bb04944fc06c12ecd7b56ad933dbedde60c2259a","modified":1611816533833},{"_id":"themes/Alien/source/css/_highlight/sunburst.styl","hash":"e6e4c009b10b9805f0c593446bf013edec47d146","modified":1611816533833},{"_id":"themes/Alien/source/css/_highlight/tomorrow-night-blue.styl","hash":"92f4423d4964fcfe34ff7ca6cb21012b5738c697","modified":1611816533833},{"_id":"themes/Alien/source/css/_highlight/tomorrow-night-bright.styl","hash":"e6b025b247e4027fb3c1b7833588f5a5b04a549c","modified":1611816533833},{"_id":"themes/Alien/source/css/_highlight/tomorrow-night-eighties.styl","hash":"8b16876cf205111d5d5454100de712bc3ea8f477","modified":1611816533833},{"_id":"themes/Alien/source/css/_highlight/tomorrow-night.styl","hash":"eb8441364bb1664ecebde77b965dc36c91133aa0","modified":1611816533833},{"_id":"themes/Alien/source/css/_highlight/tomorrow.styl","hash":"502335f0fac07ed74ca78207bcf3ef8dd2252cf6","modified":1611816533833},{"_id":"themes/Alien/source/css/_highlight/vs.styl","hash":"14fbb0c43af440a290280b26968c8a5c0786b27f","modified":1611816533833},{"_id":"themes/Alien/source/css/_highlight/xcode.styl","hash":"5fa8999c7f807c1aae29c7a1cdf681678576fb69","modified":1611816533833},{"_id":"themes/Alien/source/css/_highlight/zenburn.styl","hash":"f63534764dd6598e81177d64714a184f98153b11","modified":1611816533833},{"_id":"themes/Alien/source/css/_lib/looper.css","hash":"f4ee39f122059c1e7793b8dc1d72fcbc5fa5ea15","modified":1611816533833},{"_id":"themes/Alien/source/css/_lib/tocbot.css","hash":"f646f2bb75bcd1eb65b2788ac7bf15d4fd243ce9","modified":1611816533833},{"_id":"themes/Alien/source/css/_page/archive.styl","hash":"f33b7178eba080e592dfc6311989ecbc3d9f6279","modified":1611816533833},{"_id":"themes/Alien/source/css/_page/category.styl","hash":"9b0c89a525b2b4f0163f6ff1bf1d208277c8bb1f","modified":1611816533833},{"_id":"themes/Alien/source/css/_page/page.styl","hash":"b2cf99b15965f6851129d52d23f26ed91dc2ede7","modified":1611816533833},{"_id":"themes/Alien/source/css/_page/profile.styl","hash":"da31d90eb4529499f9e43eed612967a81f8244c1","modified":1611816533833},{"_id":"themes/Alien/source/css/_page/tag.styl","hash":"715f3fb46c9ccd7c1b701bcf5aac87051ecb3d17","modified":1611816533833},{"_id":"themes/Alien/source/css/_partial/footer.styl","hash":"578a744914f05bab4eae73838076b1cdb8130929","modified":1611816533833},{"_id":"themes/Alien/source/css/_partial/header.styl","hash":"9e4d9b67cc2dbbb92b190be3f9ebcd77e093f057","modified":1611816533833},{"_id":"themes/Alien/source/css/_partial/paginator.styl","hash":"fbe7e3ce8234e5e1a18764113f997b98d777ee5f","modified":1611816533833},{"_id":"themes/Alien/source/fonts/iconfont/demo.css","hash":"57ecc9a5ddbdbe118739c976b819641a6ed4a520","modified":1611816533833},{"_id":"themes/Alien/source/fonts/iconfont/demo_index.html","hash":"55c47c8924542a89da4741fcce7eca7e5f881e77","modified":1611816533833},{"_id":"themes/Alien/source/fonts/iconfont/iconfont.css","hash":"496a69ed5e5232feecfd8e1390877b77003e405c","modified":1611816533833},{"_id":"themes/Alien/source/fonts/iconfont/iconfont.eot","hash":"d18736f7885569e497698d17f49b9167add67dc6","modified":1611816532357},{"_id":"themes/Alien/source/fonts/iconfont/iconfont.js","hash":"87bfdaae31251f4d605646c5ae9c67196f6cc4e2","modified":1611816532357},{"_id":"themes/Alien/source/fonts/iconfont/iconfont.json","hash":"cb99651b9be2f87afcd5989480dd7360b4bf4643","modified":1611816533833},{"_id":"themes/Alien/source/fonts/iconfont/iconfont.svg","hash":"8f1d735e4fae3757dac1866dc3e30147140811e2","modified":1611816533833},{"_id":"themes/Alien/source/fonts/iconfont/iconfont.ttf","hash":"41c4f4dc82e42452dcfd19caed6c7dc333ee769e","modified":1611816532357},{"_id":"themes/Alien/source/fonts/iconfont/iconfont.woff","hash":"a57593c49b56c16ac1def0e1f3dbca3f658b3579","modified":1611816532361},{"_id":"themes/Alien/source/fonts/iconfont/iconfont.woff2","hash":"39d97a0f72417487f5c1e0a0abf8e27dd6ebda31","modified":1611816532361},{"_id":"themes/Alien/source/css/_page/_post/post_code.styl","hash":"de82671c021b4e808eb38e53f742d94613d2945b","modified":1611816533833},{"_id":"themes/Alien/source/css/_page/_post/post_content.styl","hash":"ee1dcdc3a01ce3b823a55b941123e9f3c1ca0b0c","modified":1611816533833},{"_id":"themes/Alien/source/css/_page/_post/post_copyright.styl","hash":"e1851fabb110414a624a1be634129dc6b0ce8d03","modified":1611816533833},{"_id":"themes/Alien/source/css/_page/_post/post_header.styl","hash":"9131505848bdb2fdc0503a2fd5ba6fff9bbc2d89","modified":1611816533833},{"_id":"themes/Alien/source/css/_page/_post/post_nav.styl","hash":"9c73772ad0d2b1e67007aa2816ee9b97d5152ffa","modified":1611816533833},{"_id":"themes/Alien/source/css/_page/_post/post_tags.styl","hash":"bd16f8c0e5ee2e302b61b861470ab993b6af709b","modified":1611816533833},{"_id":"themes/Alien/source/css/_page/_post/post_toc.styl","hash":"5d4dea3ad60812b5b00595208b333b62a6ce6598","modified":1611816533833},{"_id":"source/images/VoxelManipulation.webm","hash":"6754a81cbe85de5b0125c7b7a49fd4dc79a3ae1a","modified":1611816532353},{"_id":"themes/Alien/source/css/_highlight/mono-blue.styl","hash":"14fb8678739b77f35771b6d63101ddbf1e7a9fbc","modified":1611816533833},{"_id":"themes/Alien/source/css/base.styl","hash":"b4fe58e7b149e5ee54bedf234d3c32d037749b65","modified":1611816533833},{"_id":"themes/Alien/source/css/_highlight/monokai-sublime.styl","hash":"84a27bd29d939105d65f4164c219d6cc2e09ae60","modified":1611816533833},{"_id":"source/images/ArcApellagoImGUI.png","hash":"0d5da8340bd78199449bd09a91c5de8bdd08d484","modified":1611816533829},{"_id":"source/images/TerrainChunkPriorityLoadingUnloading.webm","hash":"5135151af267dc7def71707c7879f54f409f931d","modified":1611816532349},{"_id":"source/images/ModularImGUI/ArcApellagoImGUI.png","hash":"0d5da8340bd78199449bd09a91c5de8bdd08d484","modified":1611816532345},{"_id":"source/images/TerrainChunkPriorityLoading.webm","hash":"15761d31e08e2d31ddb85e1d88e175c165605624","modified":1611816532349},{"_id":"themes/Alien/source/fonts/lanting/lanting.woff2","hash":"5f325fcd2726a5b44e08b7004a5219e14847cbfa","modified":1611816532425},{"_id":"themes/Alien/source/fonts/lanting/lanting.woff","hash":"642ad1f17d27d4b1010d1a0571d1b44cbc823d9d","modified":1611816532425},{"_id":"themes/Alien/source/fonts/lanting/lanting.eot","hash":"3e184614f037939a6f98d607da3ed7dffb350e65","modified":1611816532393},{"_id":"themes/Alien/source/fonts/lanting/lanting.TTF","hash":"97e9a4538cceef4b17d54c7dc589524905d1b685","modified":1611816532377},{"_id":"themes/Alien/source/fonts/lanting/lanting.otf","hash":"4e184da596772d3ef6e5763cdee3e46a1ce2f2dd","modified":1611816532421},{"_id":"public/tags/index.html","hash":"7d2caa7b433c462b18b577d1e41618ad1f14ddc8","modified":1611816543452},{"_id":"public/why_mvc/index.html","hash":"f3158ccb6d6a0fe77ae1c871674b7671a2b90445","modified":1611816543452},{"_id":"public/blog/index.html","hash":"accfe6ecb33f0b89c6330eda1d6172b049445330","modified":1611816543452},{"_id":"public/archives/index.html","hash":"584a87511087644ace239f17f14eef0adebaa562","modified":1611816543452},{"_id":"public/archives/2020/index.html","hash":"3d7d0fe0ca2d8a1ae232edc44d97be7429e3bcf1","modified":1611816543452},{"_id":"public/archives/2020/11/index.html","hash":"79fbe09904bbb684cb3e9c2b2ecf9248cff4e43f","modified":1611816543452},{"_id":"public/archives/2021/index.html","hash":"44af2dfc36583aa3120d71951354914dfaba9ba9","modified":1611816543452},{"_id":"public/archives/2021/01/index.html","hash":"dfc5486403010ff869a5a93cf9d9a3758fcecd05","modified":1611816543452},{"_id":"public/authors/Calin Gavriliuc/index.html","hash":"8cfe29a6ef33a72109477192372ff19f34df619f","modified":1611816543452},{"_id":"public/authors/Roland Shum/index.html","hash":"2abb09a34f744d1d95cc0781beaf574a8ebac1a0","modified":1611816543452},{"_id":"public/authors/Jonathan Bourim, Calin Gavriliuc/index.html","hash":"dc517893668fb0a43199bba2da770ac3da7d8d1c","modified":1611816543452},{"_id":"public/index.html","hash":"c58be2d39f7a496035772742e4d6d75982f6a263","modified":1611816543452},{"_id":"public/tags/ImGUI/index.html","hash":"3e229f24d532949514aba25a12bcccfa3dceba29","modified":1611816543452},{"_id":"public/tags/GameDev/index.html","hash":"d1f1996dd8138024b5405afe49b2ad4774e48d52","modified":1611816543452},{"_id":"public/tags/UI/index.html","hash":"e00e342b9b0eff773e6718624aa9697d3a981c81","modified":1611816543452},{"_id":"public/tags/Unity/index.html","hash":"07bf29ddb24064c560e8a345f5dad3cdbaa66ccf","modified":1611816543452},{"_id":"public/modular-imgui/index.html","hash":"60427fbaaba029b5d9210695673448569040536c","modified":1611816543452},{"_id":"public/terrain-generation/index.html","hash":"371fd47995a2eb6169f8d4fde7bc79e480264f0a","modified":1611816543452},{"_id":"public/images/ArcApellago.jpg","hash":"8806cf1bfaae21937138e40597dc064824738f7f","modified":1611816543452},{"_id":"public/images/ChunkComponents.png","hash":"8746577879c40dffe933f4b2df5747c159ad76e3","modified":1611816543452},{"_id":"public/images/ChunkLoadingDistances.png","hash":"b036ca690211b6f09ca4dbabd917b27c33844c5c","modified":1611816543452},{"_id":"public/images/CubeMarchingLOD1.png","hash":"0df67d18bb220a405d546680ad468aa81d15b7e6","modified":1611816543452},{"_id":"public/images/CubeMarchingLOD2.png","hash":"c52e5aa63733f0fba9cd3290acfdf63aa87c6e7d","modified":1611816543452},{"_id":"public/images/DeltaBlade2700.jpg","hash":"828814b19b50d3d751e40a0be5fc5e26663a24c0","modified":1611816543452},{"_id":"public/images/ImGUIStatsBlock.png","hash":"e44ae41ef866e58185b68efd45a54fa99b03e3c7","modified":1611816543452},{"_id":"public/images/ImGUIWindow.png","hash":"8629781e04a2bee8bc0208c8d6a4540b8bdf8c24","modified":1611816543452},{"_id":"public/images/ImGUIWindowBlocks.png","hash":"faf849e86c6767fc6bf7e4d5c529e0edafd4b0c6","modified":1611816543452},{"_id":"public/images/ImGUIWindowSmall.png","hash":"9e1ba31eb6950b01a14e0276bc5683d335c36006","modified":1611816543452},{"_id":"public/images/MarchingCubesInterpolation.png","hash":"80d328c70d51b64ae1f5a624f7f69e664cac9f9c","modified":1611816543452},{"_id":"public/images/TerrainManagerFlowChartChunkLoader.png","hash":"89fa2c72bf3a41ab24117b353b49db0e2fa7595a","modified":1611816543452},{"_id":"public/images/TerrainManagerFlowChartRequestChunk.png","hash":"170b12ee510bec311b7ae752553b9b88e5c8ec8f","modified":1611816543452},{"_id":"public/images/TerrainManagerFlowChartTerrainSerializer.png","hash":"978306b982113ffada9e2b158384eda6f50d47ee","modified":1611816543452},{"_id":"public/images/mvc.png","hash":"140b05c570ad102d21138d020e2b9c15d8d53335","modified":1611816543452},{"_id":"public/images/ModularImGUI/ImGUIStatsBlock.png","hash":"e44ae41ef866e58185b68efd45a54fa99b03e3c7","modified":1611816543452},{"_id":"public/images/ModularImGUI/ImGUIWindow.png","hash":"8629781e04a2bee8bc0208c8d6a4540b8bdf8c24","modified":1611816543452},{"_id":"public/images/ModularImGUI/ImGUIWindowBlocks.png","hash":"faf849e86c6767fc6bf7e4d5c529e0edafd4b0c6","modified":1611816543452},{"_id":"public/images/ModularImGUI/ImGUIWindowSmall.png","hash":"9e1ba31eb6950b01a14e0276bc5683d335c36006","modified":1611816543452},{"_id":"public/favicon.ico","hash":"d686f9285ef682640bfce8ad2a891ef978814096","modified":1611816543452},{"_id":"public/js/debug.log","hash":"3aa8b8aa07404158ab7c7b497009278b52d86305","modified":1611816543452},{"_id":"public/fonts/iconfont/iconfont.eot","hash":"d18736f7885569e497698d17f49b9167add67dc6","modified":1611816543452},{"_id":"public/fonts/iconfont/iconfont.svg","hash":"8f1d735e4fae3757dac1866dc3e30147140811e2","modified":1611816543452},{"_id":"public/fonts/iconfont/iconfont.ttf","hash":"41c4f4dc82e42452dcfd19caed6c7dc333ee769e","modified":1611816543452},{"_id":"public/fonts/iconfont/iconfont.woff","hash":"a57593c49b56c16ac1def0e1f3dbca3f658b3579","modified":1611816543452},{"_id":"public/fonts/iconfont/iconfont.woff2","hash":"39d97a0f72417487f5c1e0a0abf8e27dd6ebda31","modified":1611816543452},{"_id":"public/images/CubeMarchingLOD4.png","hash":"43bd4f61010c74d09bb17ac60c51496cc136f4a7","modified":1611816543452},{"_id":"public/images/LODSmoothSphere.png","hash":"e1cf16f88bca167c2b936ebc89a629b5436277cf","modified":1611816543452},{"_id":"public/images/MarchingCubesDensityGradient.png","hash":"1057e99a78cf0c70d869027d2a493f1714a554ff","modified":1611816543452},{"_id":"public/images/MarchingCubesDensityGradientEnhanced.png","hash":"84b5256fa9e35267cdcba5878f841019be6c398b","modified":1611816543452},{"_id":"public/images/MarchingExampleSmooth.png","hash":"22bf57f76f4d04e7c0440b7a35417d63ea85b5bf","modified":1611816543452},{"_id":"public/images/TerrainManagerFlowChart.png","hash":"0e1b5a8a7364f11598b2cc10c63751c38d2ccb50","modified":1611816543452},{"_id":"public/images/VoxelTearing.png","hash":"f059fc36f912bf20792c10bdce35d2697a3567f7","modified":1611816543452},{"_id":"public/images/LODNoisySphere.png","hash":"fa2667f47ed1ecf1da8de0d8ae0b81a9cd12d241","modified":1611816543452},{"_id":"public/images/MarchingCubesConfigs.png","hash":"cd24f63593bd4fa91a3328ab9e25faaf5a7aeccd","modified":1611816543452},{"_id":"public/images/MarchingExample.png","hash":"f3778c6da30276c650419daa20d9a81e7d3df69a","modified":1611816543452},{"_id":"public/css/base.css","hash":"ea2d491ce6242c6b7087a2652a1135694c292137","modified":1611816543452},{"_id":"public/css/custom.css","hash":"cfb5898cd6562d778896a3cac9620f237962cb77","modified":1611816543452},{"_id":"public/css/font.css","hash":"87059edd1f2bfc4296f5599e73208893f2b06458","modified":1611816543452},{"_id":"public/css/layout.css","hash":"c81e2e01ff5e95a3e613064b8490045ff936c305","modified":1611816543452},{"_id":"public/css/media.css","hash":"5023ee404900a47d61ca0591b2d4e9eace0fe88e","modified":1611816543452},{"_id":"public/css/normalize.css","hash":"69dd446285143f5ce5ed61f5bd1e7928bca1907e","modified":1611816543452},{"_id":"public/css/spectre-icons.min.css","hash":"cc340000ffa5de5dde825a9b2bfe5ece668f3808","modified":1611816543452},{"_id":"public/css/variable.css","hash":"cb4180b3bbad471e30cf52ebb40e998d58a30d7d","modified":1611816543452},{"_id":"public/js/script.js","hash":"ab648e948f50abcbcdb1fe4dbd37e8b6cc5f3d81","modified":1611816543452},{"_id":"public/js/tocbot.min.js","hash":"bae97e8a24a05a99335f8e725641c8ca9c50502a","modified":1611816543452},{"_id":"public/fonts/iconfont/demo.css","hash":"10692bf5656e109ce1597704dc8d5644ff24d73f","modified":1611816543452},{"_id":"public/fonts/iconfont/iconfont.css","hash":"1e5540dca41dc53879226750f936e72daf616662","modified":1611816543452},{"_id":"public/fonts/iconfont/iconfont.json","hash":"3123aa840109e385d58a75d34e88a2d621e1ada8","modified":1611816543452},{"_id":"public/css/style.css","hash":"e5ea6b62d596f166850551f1f521648eaffb0435","modified":1611816543452},{"_id":"public/images/CubeMarchingSculpting.webm","hash":"f9a406560a5f3f8809ab8916aaffc9a6fa393853","modified":1611816543452},{"_id":"public/images/TerrainManagerJobSystem.png","hash":"8c6ce722c252f802e73a0428ffca4080f7e87f51","modified":1611816543452},{"_id":"public/css/spectre-exp.min.css","hash":"c6ee3f761820f3c48295a7f612d360091b1b5ee0","modified":1611816543452},{"_id":"public/fonts/iconfont/demo_index.html","hash":"16e01463756a77b4acd15ade4e6b73f0376d75e1","modified":1611816543452},{"_id":"public/fonts/iconfont/iconfont.js","hash":"87bfdaae31251f4d605646c5ae9c67196f6cc4e2","modified":1611816543452},{"_id":"public/css/spectre.min.css","hash":"810d3b7c257cd91e2eff74176aa0635f0abcc7ef","modified":1611816543452},{"_id":"public/images/EditorMode.webm","hash":"28b2a904175e889baafd4f5fe5e0d488f6f8dee2","modified":1611816543452},{"_id":"public/js/mathjax2.7.5.js","hash":"7ba18c783d543cfb4b45a0118ccb73d3f68cd46e","modified":1611816543452},{"_id":"public/images/VoxelManipulation.webm","hash":"6754a81cbe85de5b0125c7b7a49fd4dc79a3ae1a","modified":1611816543452},{"_id":"public/images/TerrainChunkPriorityLoadingUnloading.webm","hash":"5135151af267dc7def71707c7879f54f409f931d","modified":1611816543452},{"_id":"public/images/ArcApellagoImGUI.png","hash":"0d5da8340bd78199449bd09a91c5de8bdd08d484","modified":1611816543452},{"_id":"public/images/TerrainChunkPriorityLoading.webm","hash":"15761d31e08e2d31ddb85e1d88e175c165605624","modified":1611816543452},{"_id":"public/images/ModularImGUI/ArcApellagoImGUI.png","hash":"0d5da8340bd78199449bd09a91c5de8bdd08d484","modified":1611816543452},{"_id":"public/fonts/lanting/lanting.woff2","hash":"5f325fcd2726a5b44e08b7004a5219e14847cbfa","modified":1611816543452},{"_id":"public/fonts/lanting/lanting.woff","hash":"642ad1f17d27d4b1010d1a0571d1b44cbc823d9d","modified":1611816543452},{"_id":"public/fonts/lanting/lanting.eot","hash":"3e184614f037939a6f98d607da3ed7dffb350e65","modified":1611816543452},{"_id":"public/fonts/lanting/lanting.TTF","hash":"97e9a4538cceef4b17d54c7dc589524905d1b685","modified":1611816543452},{"_id":"public/fonts/lanting/lanting.otf","hash":"4e184da596772d3ef6e5763cdee3e46a1ce2f2dd","modified":1611816543452}],"Category":[],"Data":[],"Page":[{"title":"Tags","layout":"tags","date":"2020-09-14T23:26:18.000Z","_content":"","source":"tags/index.md","raw":"---\ntitle: Tags\nlayout: tags\ndate: 2020-09-14 23:26:18\n---\n","updated":"2021-01-28T06:48:53.829Z","path":"tags/index.html","comments":1,"_id":"ckkghyctq000009o1779qelml","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"0x00000000 Developer Blog","author":"Calin Gavriliuc","date":"2020-11-06T01:01:01.000Z","_content":"\n# Framework and Theme\n\nThis site was made using [Hexo](https://hexo.io/) and a custom theme.\n\nCurrently, there are multiple authors working on posts for this site.\n\n---\n\nCreated, hosted, and maintained by Calin Gavriliuc.\n\nSome shameless plugs:\n\n- [Resume](https://www.nekeko.com/)\n- [GitHub](https://www.github.com/alisenai)\n\nFor questions or information, you may contact me at:\n\n- Discord: @Alien#5438\n- This site's [repo](https://github.com/Sunglasses-At-Night/Sunglasses-At-Night.github.io).\n","source":"_posts/blog.md","raw":"---\ntitle: 0x00000000 Developer Blog\nauthor: Calin Gavriliuc\ndate: 2020-11-06 01:01:01\n---\n\n# Framework and Theme\n\nThis site was made using [Hexo](https://hexo.io/) and a custom theme.\n\nCurrently, there are multiple authors working on posts for this site.\n\n---\n\nCreated, hosted, and maintained by Calin Gavriliuc.\n\nSome shameless plugs:\n\n- [Resume](https://www.nekeko.com/)\n- [GitHub](https://www.github.com/alisenai)\n\nFor questions or information, you may contact me at:\n\n- Discord: @Alien#5438\n- This site's [repo](https://github.com/Sunglasses-At-Night/Sunglasses-At-Night.github.io).\n","slug":"blog","published":1,"updated":"2021-01-28T06:48:52.333Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckkghyctv000109o1gr6p5lgd","content":"<h1 id=\"Framework-and-Theme\"><a href=\"#Framework-and-Theme\" class=\"headerlink\" title=\"Framework and Theme\"></a>Framework and Theme</h1><p>This site was made using <a href=\"https://hexo.io/\">Hexo</a> and a custom theme.</p>\n<p>Currently, there are multiple authors working on posts for this site.</p>\n<hr>\n<p>Created, hosted, and maintained by Calin Gavriliuc.</p>\n<p>Some shameless plugs:</p>\n<ul>\n<li><a href=\"https://www.nekeko.com/\">Resume</a></li>\n<li><a href=\"https://www.github.com/alisenai\">GitHub</a></li>\n</ul>\n<p>For questions or information, you may contact me at:</p>\n<ul>\n<li>Discord: @Alien#5438</li>\n<li>This site’s <a href=\"https://github.com/Sunglasses-At-Night/Sunglasses-At-Night.github.io\">repo</a>.</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Framework-and-Theme\"><a href=\"#Framework-and-Theme\" class=\"headerlink\" title=\"Framework and Theme\"></a>Framework and Theme</h1><p>This site was made using <a href=\"https://hexo.io/\">Hexo</a> and a custom theme.</p>\n<p>Currently, there are multiple authors working on posts for this site.</p>\n<hr>\n<p>Created, hosted, and maintained by Calin Gavriliuc.</p>\n<p>Some shameless plugs:</p>\n<ul>\n<li><a href=\"https://www.nekeko.com/\">Resume</a></li>\n<li><a href=\"https://www.github.com/alisenai\">GitHub</a></li>\n</ul>\n<p>For questions or information, you may contact me at:</p>\n<ul>\n<li>Discord: @Alien#5438</li>\n<li>This site’s <a href=\"https://github.com/Sunglasses-At-Night/Sunglasses-At-Night.github.io\">repo</a>.</li>\n</ul>\n"},{"title":"Modular ImGUI","author":"Calin Gavriliuc","date":"2021-01-24T01:01:01.000Z","_content":"\n# A More Modular ImGUI Method\n\n## Introduction\n\n[ImGUI](https://github.com/ocornut/imgui) is one of the most popular graphical user interface libraries available for content creation, debugging, and visualization tools. Since this library can be used for many applications, it often becomes highly entangled and messy to work with.\n\nAs a game developer, I was tasked with implementing the main framework and a large amount of ImGUI content for a game called [Arc Apellago](https://store.steampowered.com/app/1454430/Arc_Apellago/). It was overall a simple game, but it also contained a surprising amount of ImGUI content.\n\n![Arc Apellago ImGUI](/images/ModularImGUI/ArcApellagoImGUI.png)\n\n## Designing the Interface\n\nGiven the design of ImGUI, content separated across windows with some content on them, how can we clean the code up?\n\n<!-- <img src=\"/images/ModularImGUI/ImGuiWindow.png\" alt=\"ImGUI Window\" width=\"300px\"/> -->\n![Arc Apellago ImGUI Window](/images/ModularImGUI/ImGUIWindow.png)\n\nFor one, we can contain all the functionality and related information for our given window in its own object. So far, a window is just a context and some updated content. First, let us make a class that holds a `title`, a `showWindow_` class variable, and an `Update` to update this window's content.\n\nA parent class that follows these requirements could look as follows:\n\n```c++\nclass EditorWindow\n{\npublic:\n  explicit EditorWindow(std::string title);\n\n  virtual ~EditorWindow();\n\n  virtual void Update(float dt);\n\nprivate:\n    std::string title_;\n    bool showWindow_;\n};\n```\n\nWhen the previous image is reduced and grouped, you get the following:\n\n![Arc Apellago ImGUI Small Window](/images/ModularImGUI/ImGUIWindowSmall.png)\n\nThis reduced-content window contains three major pieces of content:\n\n- FPS / Display Statistics\n- Debug Settings\n- Collision Settings\n\nAs these are only related as configuration/stats content, we can break these up as well. To do so, let us create another class, `EditorBlock`, which can be attached to any `EditorWindow`.\n\n```c++\nclass EditorBlock\n{\npublic:\n  EditorBlock() = default;\n\n  virtual ~EditorBlock() = default;\n\n  virtual void Update(float dt) = 0;\n};\n```\n\nThese blocks of content are quite simple - just an update for the content they should display./\nThey both allow for separation of code and allows multiple teammates' content on the same window if you are working on a team.\n\nNext, we must adapt our current `EditorWindow` to store these `EditorBlock`s.\n\n```c++\nclass EditorWindow\n{\npublic:\n  explicit EditorWindow(std::string title);\n\n  virtual ~EditorWindow();\n\n  virtual void Update(float dt);\n\n  void AddBlock(EditorBlock* editorBlock);\n\nprivate:\n    std::string title_;\n    xvector<EditorBlock*> blocks_;\n    bool showWindow_;\n};\n```\n\nIt should be noted that the `Update` function will now just call the `EditorBlock`s' `Update` functions.\n\n## Creating a Block\n\nAs an example of using the blocks, let's implement the `StatsEditorBlock` which displays the following:\n\n![Stats Editor Block](/images/ModularImGUI/ImGUIStatsBlock.png)\n\n**Note:** The `ImGUI FPS` stat has been omitted for simplicity.\n\n`StatsEditorBlock.h`\n\n```c++\n#include \"EditorBlock.h\"\n\nclass StatsEditorBlock : public EditorBlock\n{\npublic:\n    void Update(float dt) override;\n};\n```\n\nNote that creating a class for each block allows it to implement helper methods and have internal state variables - which are often useful.\n\n`StatsEditorBlock.cpp`\n\n```c++\n#include \"imgui.h\"\n#include \"StatsEditorBlock.h\"\n\nvoid StatsEditorBlock::Update(float dt)\n{\n    // Get the needed information from ImGUI\n    auto io = ImGui::GetIO();\n    // Display the FPS\n    ImGui::Text(\"FPS: %f\", io.Framerate);\n    // Display the display size\n    ImGui::Text(\"Display X:%d\", static_cast<int>(io.DisplaySize.x));\n    ImGui::Text(\"Display Y:%d\", static_cast<int>(io.DisplaySize.y));\n}\n```\n\n## Using the Interface\n\nNow that all the functionality is abstracted out and self-contained in other classes, the interface is as simple as choosing which blocks go where.\n\n![Arc Apellago ImGUI Window Sections](/images/ModularImGUI/ImGUIWindowBlocks.png)\n\n```c++\n// Create a window and give it a title\nauto statsConfigWindow = new EditorWindow(\"Stats and Config\");\n// Add a stats block, debug draw config block, and collision config block to the window\nstatsConfigWindow->AddBlock(new StatsEditorBlock());\nstatsConfigWindow->AddBlock(new DebugDrawConfigBlock());\nstatsConfigWindow->AddBlock(new CollisionConfigBlock());\n// Add the window to the main ImGUI update list\nwindows_.emplace_back(statsConfigWindow);\n```\n\n## Conclusion\n\nThis layout separates unrelated code into manageable blocks to allow for easier layout planning and code decoupling. With ImGUI's initialization and update code out of the way, it will be much easier for your teammates to create ImGUI blocks or windows as they require - this played a large role in my team's final ImGUI implementation.\n\n---\n\n**Some final notes and tips:**\n\n- Use the `ifdef` paradigm to compile-out ImGUI from your project if you don't want to ship with it and _test that this define works regularly_.\n- Check out the [docking](https://github.com/ocornut/imgui/tree/docking) branch of ImGUI to help organize your ImGUI windows further.\n\n---\n","source":"_posts/modular-imgui.md","raw":"---\ntitle: Modular ImGUI\nauthor: Calin Gavriliuc\ntags:\n- ImGUI\n- GameDev\ndate: 2021-01-24 01:01:01\n---\n\n# A More Modular ImGUI Method\n\n## Introduction\n\n[ImGUI](https://github.com/ocornut/imgui) is one of the most popular graphical user interface libraries available for content creation, debugging, and visualization tools. Since this library can be used for many applications, it often becomes highly entangled and messy to work with.\n\nAs a game developer, I was tasked with implementing the main framework and a large amount of ImGUI content for a game called [Arc Apellago](https://store.steampowered.com/app/1454430/Arc_Apellago/). It was overall a simple game, but it also contained a surprising amount of ImGUI content.\n\n![Arc Apellago ImGUI](/images/ModularImGUI/ArcApellagoImGUI.png)\n\n## Designing the Interface\n\nGiven the design of ImGUI, content separated across windows with some content on them, how can we clean the code up?\n\n<!-- <img src=\"/images/ModularImGUI/ImGuiWindow.png\" alt=\"ImGUI Window\" width=\"300px\"/> -->\n![Arc Apellago ImGUI Window](/images/ModularImGUI/ImGUIWindow.png)\n\nFor one, we can contain all the functionality and related information for our given window in its own object. So far, a window is just a context and some updated content. First, let us make a class that holds a `title`, a `showWindow_` class variable, and an `Update` to update this window's content.\n\nA parent class that follows these requirements could look as follows:\n\n```c++\nclass EditorWindow\n{\npublic:\n  explicit EditorWindow(std::string title);\n\n  virtual ~EditorWindow();\n\n  virtual void Update(float dt);\n\nprivate:\n    std::string title_;\n    bool showWindow_;\n};\n```\n\nWhen the previous image is reduced and grouped, you get the following:\n\n![Arc Apellago ImGUI Small Window](/images/ModularImGUI/ImGUIWindowSmall.png)\n\nThis reduced-content window contains three major pieces of content:\n\n- FPS / Display Statistics\n- Debug Settings\n- Collision Settings\n\nAs these are only related as configuration/stats content, we can break these up as well. To do so, let us create another class, `EditorBlock`, which can be attached to any `EditorWindow`.\n\n```c++\nclass EditorBlock\n{\npublic:\n  EditorBlock() = default;\n\n  virtual ~EditorBlock() = default;\n\n  virtual void Update(float dt) = 0;\n};\n```\n\nThese blocks of content are quite simple - just an update for the content they should display./\nThey both allow for separation of code and allows multiple teammates' content on the same window if you are working on a team.\n\nNext, we must adapt our current `EditorWindow` to store these `EditorBlock`s.\n\n```c++\nclass EditorWindow\n{\npublic:\n  explicit EditorWindow(std::string title);\n\n  virtual ~EditorWindow();\n\n  virtual void Update(float dt);\n\n  void AddBlock(EditorBlock* editorBlock);\n\nprivate:\n    std::string title_;\n    xvector<EditorBlock*> blocks_;\n    bool showWindow_;\n};\n```\n\nIt should be noted that the `Update` function will now just call the `EditorBlock`s' `Update` functions.\n\n## Creating a Block\n\nAs an example of using the blocks, let's implement the `StatsEditorBlock` which displays the following:\n\n![Stats Editor Block](/images/ModularImGUI/ImGUIStatsBlock.png)\n\n**Note:** The `ImGUI FPS` stat has been omitted for simplicity.\n\n`StatsEditorBlock.h`\n\n```c++\n#include \"EditorBlock.h\"\n\nclass StatsEditorBlock : public EditorBlock\n{\npublic:\n    void Update(float dt) override;\n};\n```\n\nNote that creating a class for each block allows it to implement helper methods and have internal state variables - which are often useful.\n\n`StatsEditorBlock.cpp`\n\n```c++\n#include \"imgui.h\"\n#include \"StatsEditorBlock.h\"\n\nvoid StatsEditorBlock::Update(float dt)\n{\n    // Get the needed information from ImGUI\n    auto io = ImGui::GetIO();\n    // Display the FPS\n    ImGui::Text(\"FPS: %f\", io.Framerate);\n    // Display the display size\n    ImGui::Text(\"Display X:%d\", static_cast<int>(io.DisplaySize.x));\n    ImGui::Text(\"Display Y:%d\", static_cast<int>(io.DisplaySize.y));\n}\n```\n\n## Using the Interface\n\nNow that all the functionality is abstracted out and self-contained in other classes, the interface is as simple as choosing which blocks go where.\n\n![Arc Apellago ImGUI Window Sections](/images/ModularImGUI/ImGUIWindowBlocks.png)\n\n```c++\n// Create a window and give it a title\nauto statsConfigWindow = new EditorWindow(\"Stats and Config\");\n// Add a stats block, debug draw config block, and collision config block to the window\nstatsConfigWindow->AddBlock(new StatsEditorBlock());\nstatsConfigWindow->AddBlock(new DebugDrawConfigBlock());\nstatsConfigWindow->AddBlock(new CollisionConfigBlock());\n// Add the window to the main ImGUI update list\nwindows_.emplace_back(statsConfigWindow);\n```\n\n## Conclusion\n\nThis layout separates unrelated code into manageable blocks to allow for easier layout planning and code decoupling. With ImGUI's initialization and update code out of the way, it will be much easier for your teammates to create ImGUI blocks or windows as they require - this played a large role in my team's final ImGUI implementation.\n\n---\n\n**Some final notes and tips:**\n\n- Use the `ifdef` paradigm to compile-out ImGUI from your project if you don't want to ship with it and _test that this define works regularly_.\n- Check out the [docking](https://github.com/ocornut/imgui/tree/docking) branch of ImGUI to help organize your ImGUI windows further.\n\n---\n","slug":"modular-imgui","published":1,"updated":"2021-01-28T06:48:53.845Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckkghyctz000209o14l4bd26s","content":"<h1 id=\"A-More-Modular-ImGUI-Method\"><a href=\"#A-More-Modular-ImGUI-Method\" class=\"headerlink\" title=\"A More Modular ImGUI Method\"></a>A More Modular ImGUI Method</h1><h2 id=\"Introduction\"><a href=\"#Introduction\" class=\"headerlink\" title=\"Introduction\"></a>Introduction</h2><p><a href=\"https://github.com/ocornut/imgui\">ImGUI</a> is one of the most popular graphical user interface libraries available for content creation, debugging, and visualization tools. Since this library can be used for many applications, it often becomes highly entangled and messy to work with.</p>\n<p>As a game developer, I was tasked with implementing the main framework and a large amount of ImGUI content for a game called <a href=\"https://store.steampowered.com/app/1454430/Arc_Apellago/\">Arc Apellago</a>. It was overall a simple game, but it also contained a surprising amount of ImGUI content.</p>\n<p><img src=\"/images/ModularImGUI/ArcApellagoImGUI.png\" alt=\"Arc Apellago ImGUI\"></p>\n<h2 id=\"Designing-the-Interface\"><a href=\"#Designing-the-Interface\" class=\"headerlink\" title=\"Designing the Interface\"></a>Designing the Interface</h2><p>Given the design of ImGUI, content separated across windows with some content on them, how can we clean the code up?</p>\n<!-- <img src=\"/images/ModularImGUI/ImGuiWindow.png\" alt=\"ImGUI Window\" width=\"300px\"/> -->\n<p><img src=\"/images/ModularImGUI/ImGUIWindow.png\" alt=\"Arc Apellago ImGUI Window\"></p>\n<p>For one, we can contain all the functionality and related information for our given window in its own object. So far, a window is just a context and some updated content. First, let us make a class that holds a <code>title</code>, a <code>showWindow_</code> class variable, and an <code>Update</code> to update this window’s content.</p>\n<p>A parent class that follows these requirements could look as follows:</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">EditorWindow</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">explicit</span> <span class=\"title\">EditorWindow</span><span class=\"params\">(<span class=\"built_in\">std</span>::<span class=\"built_in\">string</span> title)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">virtual</span> ~EditorWindow();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"keyword\">void</span> <span class=\"title\">Update</span><span class=\"params\">(<span class=\"keyword\">float</span> dt)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">string</span> title_;</span><br><span class=\"line\">    <span class=\"keyword\">bool</span> showWindow_;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>When the previous image is reduced and grouped, you get the following:</p>\n<p><img src=\"/images/ModularImGUI/ImGUIWindowSmall.png\" alt=\"Arc Apellago ImGUI Small Window\"></p>\n<p>This reduced-content window contains three major pieces of content:</p>\n<ul>\n<li>FPS / Display Statistics</li>\n<li>Debug Settings</li>\n<li>Collision Settings</li>\n</ul>\n<p>As these are only related as configuration/stats content, we can break these up as well. To do so, let us create another class, <code>EditorBlock</code>, which can be attached to any <code>EditorWindow</code>.</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">EditorBlock</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">  EditorBlock() = <span class=\"keyword\">default</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">virtual</span> ~EditorBlock() = <span class=\"keyword\">default</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"keyword\">void</span> <span class=\"title\">Update</span><span class=\"params\">(<span class=\"keyword\">float</span> dt)</span> </span>= <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>These blocks of content are quite simple - just an update for the content they should display./<br>They both allow for separation of code and allows multiple teammates’ content on the same window if you are working on a team.</p>\n<p>Next, we must adapt our current <code>EditorWindow</code> to store these <code>EditorBlock</code>s.</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">EditorWindow</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">explicit</span> <span class=\"title\">EditorWindow</span><span class=\"params\">(<span class=\"built_in\">std</span>::<span class=\"built_in\">string</span> title)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">virtual</span> ~EditorWindow();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"keyword\">void</span> <span class=\"title\">Update</span><span class=\"params\">(<span class=\"keyword\">float</span> dt)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">AddBlock</span><span class=\"params\">(EditorBlock* editorBlock)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">string</span> title_;</span><br><span class=\"line\">    xvector&lt;EditorBlock*&gt; blocks_;</span><br><span class=\"line\">    <span class=\"keyword\">bool</span> showWindow_;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>It should be noted that the <code>Update</code> function will now just call the <code>EditorBlock</code>s’ <code>Update</code> functions.</p>\n<h2 id=\"Creating-a-Block\"><a href=\"#Creating-a-Block\" class=\"headerlink\" title=\"Creating a Block\"></a>Creating a Block</h2><p>As an example of using the blocks, let’s implement the <code>StatsEditorBlock</code> which displays the following:</p>\n<p><img src=\"/images/ModularImGUI/ImGUIStatsBlock.png\" alt=\"Stats Editor Block\"></p>\n<p><strong>Note:</strong> The <code>ImGUI FPS</code> stat has been omitted for simplicity.</p>\n<p><code>StatsEditorBlock.h</code></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&quot;EditorBlock.h&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">StatsEditorBlock</span> :</span> <span class=\"keyword\">public</span> EditorBlock</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Update</span><span class=\"params\">(<span class=\"keyword\">float</span> dt)</span> <span class=\"keyword\">override</span></span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>Note that creating a class for each block allows it to implement helper methods and have internal state variables - which are often useful.</p>\n<p><code>StatsEditorBlock.cpp</code></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&quot;imgui.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&quot;StatsEditorBlock.h&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">StatsEditorBlock::Update</span><span class=\"params\">(<span class=\"keyword\">float</span> dt)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// Get the needed information from ImGUI</span></span><br><span class=\"line\">    <span class=\"keyword\">auto</span> io = ImGui::GetIO();</span><br><span class=\"line\">    <span class=\"comment\">// Display the FPS</span></span><br><span class=\"line\">    ImGui::Text(<span class=\"string\">&quot;FPS: %f&quot;</span>, io.Framerate);</span><br><span class=\"line\">    <span class=\"comment\">// Display the display size</span></span><br><span class=\"line\">    ImGui::Text(<span class=\"string\">&quot;Display X:%d&quot;</span>, <span class=\"keyword\">static_cast</span>&lt;<span class=\"keyword\">int</span>&gt;(io.DisplaySize.x));</span><br><span class=\"line\">    ImGui::Text(<span class=\"string\">&quot;Display Y:%d&quot;</span>, <span class=\"keyword\">static_cast</span>&lt;<span class=\"keyword\">int</span>&gt;(io.DisplaySize.y));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Using-the-Interface\"><a href=\"#Using-the-Interface\" class=\"headerlink\" title=\"Using the Interface\"></a>Using the Interface</h2><p>Now that all the functionality is abstracted out and self-contained in other classes, the interface is as simple as choosing which blocks go where.</p>\n<p><img src=\"/images/ModularImGUI/ImGUIWindowBlocks.png\" alt=\"Arc Apellago ImGUI Window Sections\"></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Create a window and give it a title</span></span><br><span class=\"line\"><span class=\"keyword\">auto</span> statsConfigWindow = <span class=\"keyword\">new</span> EditorWindow(<span class=\"string\">&quot;Stats and Config&quot;</span>);</span><br><span class=\"line\"><span class=\"comment\">// Add a stats block, debug draw config block, and collision config block to the window</span></span><br><span class=\"line\">statsConfigWindow-&gt;AddBlock(<span class=\"keyword\">new</span> StatsEditorBlock());</span><br><span class=\"line\">statsConfigWindow-&gt;AddBlock(<span class=\"keyword\">new</span> DebugDrawConfigBlock());</span><br><span class=\"line\">statsConfigWindow-&gt;AddBlock(<span class=\"keyword\">new</span> CollisionConfigBlock());</span><br><span class=\"line\"><span class=\"comment\">// Add the window to the main ImGUI update list</span></span><br><span class=\"line\">windows_.emplace_back(statsConfigWindow);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Conclusion\"><a href=\"#Conclusion\" class=\"headerlink\" title=\"Conclusion\"></a>Conclusion</h2><p>This layout separates unrelated code into manageable blocks to allow for easier layout planning and code decoupling. With ImGUI’s initialization and update code out of the way, it will be much easier for your teammates to create ImGUI blocks or windows as they require - this played a large role in my team’s final ImGUI implementation.</p>\n<hr>\n<p><strong>Some final notes and tips:</strong></p>\n<ul>\n<li>Use the <code>ifdef</code> paradigm to compile-out ImGUI from your project if you don’t want to ship with it and <em>test that this define works regularly</em>.</li>\n<li>Check out the <a href=\"https://github.com/ocornut/imgui/tree/docking\">docking</a> branch of ImGUI to help organize your ImGUI windows further.</li>\n</ul>\n<hr>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"A-More-Modular-ImGUI-Method\"><a href=\"#A-More-Modular-ImGUI-Method\" class=\"headerlink\" title=\"A More Modular ImGUI Method\"></a>A More Modular ImGUI Method</h1><h2 id=\"Introduction\"><a href=\"#Introduction\" class=\"headerlink\" title=\"Introduction\"></a>Introduction</h2><p><a href=\"https://github.com/ocornut/imgui\">ImGUI</a> is one of the most popular graphical user interface libraries available for content creation, debugging, and visualization tools. Since this library can be used for many applications, it often becomes highly entangled and messy to work with.</p>\n<p>As a game developer, I was tasked with implementing the main framework and a large amount of ImGUI content for a game called <a href=\"https://store.steampowered.com/app/1454430/Arc_Apellago/\">Arc Apellago</a>. It was overall a simple game, but it also contained a surprising amount of ImGUI content.</p>\n<p><img src=\"/images/ModularImGUI/ArcApellagoImGUI.png\" alt=\"Arc Apellago ImGUI\"></p>\n<h2 id=\"Designing-the-Interface\"><a href=\"#Designing-the-Interface\" class=\"headerlink\" title=\"Designing the Interface\"></a>Designing the Interface</h2><p>Given the design of ImGUI, content separated across windows with some content on them, how can we clean the code up?</p>\n<!-- <img src=\"/images/ModularImGUI/ImGuiWindow.png\" alt=\"ImGUI Window\" width=\"300px\"/> -->\n<p><img src=\"/images/ModularImGUI/ImGUIWindow.png\" alt=\"Arc Apellago ImGUI Window\"></p>\n<p>For one, we can contain all the functionality and related information for our given window in its own object. So far, a window is just a context and some updated content. First, let us make a class that holds a <code>title</code>, a <code>showWindow_</code> class variable, and an <code>Update</code> to update this window’s content.</p>\n<p>A parent class that follows these requirements could look as follows:</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">EditorWindow</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">explicit</span> <span class=\"title\">EditorWindow</span><span class=\"params\">(<span class=\"built_in\">std</span>::<span class=\"built_in\">string</span> title)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">virtual</span> ~EditorWindow();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"keyword\">void</span> <span class=\"title\">Update</span><span class=\"params\">(<span class=\"keyword\">float</span> dt)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">string</span> title_;</span><br><span class=\"line\">    <span class=\"keyword\">bool</span> showWindow_;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>When the previous image is reduced and grouped, you get the following:</p>\n<p><img src=\"/images/ModularImGUI/ImGUIWindowSmall.png\" alt=\"Arc Apellago ImGUI Small Window\"></p>\n<p>This reduced-content window contains three major pieces of content:</p>\n<ul>\n<li>FPS / Display Statistics</li>\n<li>Debug Settings</li>\n<li>Collision Settings</li>\n</ul>\n<p>As these are only related as configuration/stats content, we can break these up as well. To do so, let us create another class, <code>EditorBlock</code>, which can be attached to any <code>EditorWindow</code>.</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">EditorBlock</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">  EditorBlock() = <span class=\"keyword\">default</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">virtual</span> ~EditorBlock() = <span class=\"keyword\">default</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"keyword\">void</span> <span class=\"title\">Update</span><span class=\"params\">(<span class=\"keyword\">float</span> dt)</span> </span>= <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>These blocks of content are quite simple - just an update for the content they should display./<br>They both allow for separation of code and allows multiple teammates’ content on the same window if you are working on a team.</p>\n<p>Next, we must adapt our current <code>EditorWindow</code> to store these <code>EditorBlock</code>s.</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">EditorWindow</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">explicit</span> <span class=\"title\">EditorWindow</span><span class=\"params\">(<span class=\"built_in\">std</span>::<span class=\"built_in\">string</span> title)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">virtual</span> ~EditorWindow();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"keyword\">void</span> <span class=\"title\">Update</span><span class=\"params\">(<span class=\"keyword\">float</span> dt)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">AddBlock</span><span class=\"params\">(EditorBlock* editorBlock)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">string</span> title_;</span><br><span class=\"line\">    xvector&lt;EditorBlock*&gt; blocks_;</span><br><span class=\"line\">    <span class=\"keyword\">bool</span> showWindow_;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>It should be noted that the <code>Update</code> function will now just call the <code>EditorBlock</code>s’ <code>Update</code> functions.</p>\n<h2 id=\"Creating-a-Block\"><a href=\"#Creating-a-Block\" class=\"headerlink\" title=\"Creating a Block\"></a>Creating a Block</h2><p>As an example of using the blocks, let’s implement the <code>StatsEditorBlock</code> which displays the following:</p>\n<p><img src=\"/images/ModularImGUI/ImGUIStatsBlock.png\" alt=\"Stats Editor Block\"></p>\n<p><strong>Note:</strong> The <code>ImGUI FPS</code> stat has been omitted for simplicity.</p>\n<p><code>StatsEditorBlock.h</code></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&quot;EditorBlock.h&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">StatsEditorBlock</span> :</span> <span class=\"keyword\">public</span> EditorBlock</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Update</span><span class=\"params\">(<span class=\"keyword\">float</span> dt)</span> <span class=\"keyword\">override</span></span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>Note that creating a class for each block allows it to implement helper methods and have internal state variables - which are often useful.</p>\n<p><code>StatsEditorBlock.cpp</code></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&quot;imgui.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&quot;StatsEditorBlock.h&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">StatsEditorBlock::Update</span><span class=\"params\">(<span class=\"keyword\">float</span> dt)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// Get the needed information from ImGUI</span></span><br><span class=\"line\">    <span class=\"keyword\">auto</span> io = ImGui::GetIO();</span><br><span class=\"line\">    <span class=\"comment\">// Display the FPS</span></span><br><span class=\"line\">    ImGui::Text(<span class=\"string\">&quot;FPS: %f&quot;</span>, io.Framerate);</span><br><span class=\"line\">    <span class=\"comment\">// Display the display size</span></span><br><span class=\"line\">    ImGui::Text(<span class=\"string\">&quot;Display X:%d&quot;</span>, <span class=\"keyword\">static_cast</span>&lt;<span class=\"keyword\">int</span>&gt;(io.DisplaySize.x));</span><br><span class=\"line\">    ImGui::Text(<span class=\"string\">&quot;Display Y:%d&quot;</span>, <span class=\"keyword\">static_cast</span>&lt;<span class=\"keyword\">int</span>&gt;(io.DisplaySize.y));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Using-the-Interface\"><a href=\"#Using-the-Interface\" class=\"headerlink\" title=\"Using the Interface\"></a>Using the Interface</h2><p>Now that all the functionality is abstracted out and self-contained in other classes, the interface is as simple as choosing which blocks go where.</p>\n<p><img src=\"/images/ModularImGUI/ImGUIWindowBlocks.png\" alt=\"Arc Apellago ImGUI Window Sections\"></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Create a window and give it a title</span></span><br><span class=\"line\"><span class=\"keyword\">auto</span> statsConfigWindow = <span class=\"keyword\">new</span> EditorWindow(<span class=\"string\">&quot;Stats and Config&quot;</span>);</span><br><span class=\"line\"><span class=\"comment\">// Add a stats block, debug draw config block, and collision config block to the window</span></span><br><span class=\"line\">statsConfigWindow-&gt;AddBlock(<span class=\"keyword\">new</span> StatsEditorBlock());</span><br><span class=\"line\">statsConfigWindow-&gt;AddBlock(<span class=\"keyword\">new</span> DebugDrawConfigBlock());</span><br><span class=\"line\">statsConfigWindow-&gt;AddBlock(<span class=\"keyword\">new</span> CollisionConfigBlock());</span><br><span class=\"line\"><span class=\"comment\">// Add the window to the main ImGUI update list</span></span><br><span class=\"line\">windows_.emplace_back(statsConfigWindow);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Conclusion\"><a href=\"#Conclusion\" class=\"headerlink\" title=\"Conclusion\"></a>Conclusion</h2><p>This layout separates unrelated code into manageable blocks to allow for easier layout planning and code decoupling. With ImGUI’s initialization and update code out of the way, it will be much easier for your teammates to create ImGUI blocks or windows as they require - this played a large role in my team’s final ImGUI implementation.</p>\n<hr>\n<p><strong>Some final notes and tips:</strong></p>\n<ul>\n<li>Use the <code>ifdef</code> paradigm to compile-out ImGUI from your project if you don’t want to ship with it and <em>test that this define works regularly</em>.</li>\n<li>Check out the <a href=\"https://github.com/ocornut/imgui/tree/docking\">docking</a> branch of ImGUI to help organize your ImGUI windows further.</li>\n</ul>\n<hr>\n"},{"title":"Why MVC?","author":"Roland Shum","date":"2021-01-27T01:01:01.000Z","_content":"\n# What is MVC?\n\n## Introduction\n\nHey everyone, lets talk about the Model-View-Controller (MVC) architecture. Writing programs has always been a combat against rising complexity. MVC exploded in popularity around\nthe 2000s when web programming became popular. Today I'll be talking about how MVC can be a toolkit in your development. The traditional approach of programming works on\nInput -> Process -> Output approach while MVC works on Controller → Model -> View.\n\nUnfortunately, the traditional approach usually means the UI coding, the module data, and the module functions are all written in one file. As one can imagine, as the file grows\nthe costs of maintaining all three parts of the code grows, not to mention its lack of testability. This is where MVC comes in. MVC splits the logic three ways: Input, UI, and Data.\nThe UI logic belongs in the View, the input in the Controller, and the data in the Model.\n\nThis separation helps tremendously as each file is dedicated to implementing one thing. So now instead of implementing a ball of spitfire, you're implementing three different\nparts of it, then joining them together.\n\n## MVC Parts\n\n* **Model**: This is the main logic of the module. Anything that deals with backend stuff that only programmers care about belongs here.\n* **View**: Views are components that display the UI. Any logic to do with UI goes here. Typically, this reads the model data, and generates the UI based off that.\n* **Controller**: This component handles user interactions, work with the model, and ultimately select a view to render that displays UI. In an MVC application, the view only displays information;\nthe controller handles and responds to user input and interaction.\n\nThe core concepts of MVC are to split things such that they are not dependent on each other. As such, the Model, View, and Controller can be swapped out anytime.\nFor example, if the View were to be swapped out, it would still be referencing the same Model and Controller.\n\nThe diagram below shows what model takes data from, and is aware of, whom. The Controller takes data from both View and Model, while the View takes data from the Model.\n\n![MVC Diagram](/images/mvc.png)\n\n## Variants\n\nMVC has been around for a long time now, and there are many variants of MVC flying around. In game development, a popular model is the M-VC (Model - ViewController). In this model,\nthe View and Controller are mixed together because its been implemented in the Engine (Unity for example). So your UI script would be a ViewController, and it will have a reference\nto the Model it needs to modify.\n\nAnother popular model is the MVVM (Model-View-ViewModel). This model abstracts the View from the Model, putting a ViewModel class in between.\n\nAs with other software patterns, MVC expresses the \"core of the solution\" to a problem while allowing it to be adapted for each system.\nParticular MVC designs can vary significantly from the traditional description.\n\n## Pros and Cons\n\nPros:\n\n* **Parallel Development** - The MVC modules are all separate from each other, meaning they can be simultaneously developed.\n* **Better prediction of schedule** - By splitting apart one giant module, a programmer has an easier time estimating the development time of such module.\n* **Low Coupling** - By its architecture, there is low coupling between all three modules. Swap the View, and you have a UI completely different.\n* **Scalability** - Responsibility of code is clear, thus it is much easier to maintain and scale the individual modules.\n\nCons:\n\n* **Low navigability** - The code is now harder to navigate because of a new abstraction, and this abstraction requires the user to first understand how responsibility each part\nof MVC takes.\n* **Scattering of code** - Code is now more scattered. Developing a consistent representation in three different compositions can be harder.\n\n## Conclusion\n\nAt the end of the day, MVC is a tool to help decouple features and navigate complexity in code. A hallmark of bad MVC are hacks that allow the Module and View to talk to each\nother. This is *very* frowned upon as it completely breaks the reason why the architecture is used. A proper implementation would mean the Model does not even need to be\naware of the View, as long as the View is fed a Model.\n","source":"_posts/why_mvc.md","raw":"---\ntitle: Why MVC?\nauthor: Roland Shum\ntags:\n- GameDev\n- UI\ndate: 2021-01-27 01:01:01\n---\n\n# What is MVC?\n\n## Introduction\n\nHey everyone, lets talk about the Model-View-Controller (MVC) architecture. Writing programs has always been a combat against rising complexity. MVC exploded in popularity around\nthe 2000s when web programming became popular. Today I'll be talking about how MVC can be a toolkit in your development. The traditional approach of programming works on\nInput -> Process -> Output approach while MVC works on Controller → Model -> View.\n\nUnfortunately, the traditional approach usually means the UI coding, the module data, and the module functions are all written in one file. As one can imagine, as the file grows\nthe costs of maintaining all three parts of the code grows, not to mention its lack of testability. This is where MVC comes in. MVC splits the logic three ways: Input, UI, and Data.\nThe UI logic belongs in the View, the input in the Controller, and the data in the Model.\n\nThis separation helps tremendously as each file is dedicated to implementing one thing. So now instead of implementing a ball of spitfire, you're implementing three different\nparts of it, then joining them together.\n\n## MVC Parts\n\n* **Model**: This is the main logic of the module. Anything that deals with backend stuff that only programmers care about belongs here.\n* **View**: Views are components that display the UI. Any logic to do with UI goes here. Typically, this reads the model data, and generates the UI based off that.\n* **Controller**: This component handles user interactions, work with the model, and ultimately select a view to render that displays UI. In an MVC application, the view only displays information;\nthe controller handles and responds to user input and interaction.\n\nThe core concepts of MVC are to split things such that they are not dependent on each other. As such, the Model, View, and Controller can be swapped out anytime.\nFor example, if the View were to be swapped out, it would still be referencing the same Model and Controller.\n\nThe diagram below shows what model takes data from, and is aware of, whom. The Controller takes data from both View and Model, while the View takes data from the Model.\n\n![MVC Diagram](/images/mvc.png)\n\n## Variants\n\nMVC has been around for a long time now, and there are many variants of MVC flying around. In game development, a popular model is the M-VC (Model - ViewController). In this model,\nthe View and Controller are mixed together because its been implemented in the Engine (Unity for example). So your UI script would be a ViewController, and it will have a reference\nto the Model it needs to modify.\n\nAnother popular model is the MVVM (Model-View-ViewModel). This model abstracts the View from the Model, putting a ViewModel class in between.\n\nAs with other software patterns, MVC expresses the \"core of the solution\" to a problem while allowing it to be adapted for each system.\nParticular MVC designs can vary significantly from the traditional description.\n\n## Pros and Cons\n\nPros:\n\n* **Parallel Development** - The MVC modules are all separate from each other, meaning they can be simultaneously developed.\n* **Better prediction of schedule** - By splitting apart one giant module, a programmer has an easier time estimating the development time of such module.\n* **Low Coupling** - By its architecture, there is low coupling between all three modules. Swap the View, and you have a UI completely different.\n* **Scalability** - Responsibility of code is clear, thus it is much easier to maintain and scale the individual modules.\n\nCons:\n\n* **Low navigability** - The code is now harder to navigate because of a new abstraction, and this abstraction requires the user to first understand how responsibility each part\nof MVC takes.\n* **Scattering of code** - Code is now more scattered. Developing a consistent representation in three different compositions can be harder.\n\n## Conclusion\n\nAt the end of the day, MVC is a tool to help decouple features and navigate complexity in code. A hallmark of bad MVC are hacks that allow the Module and View to talk to each\nother. This is *very* frowned upon as it completely breaks the reason why the architecture is used. A proper implementation would mean the Model does not even need to be\naware of the View, as long as the View is fed a Model.\n","slug":"why_mvc","published":1,"updated":"2021-01-28T06:48:53.845Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckkghycu7000709o13dn29yg3","content":"<h1 id=\"What-is-MVC\"><a href=\"#What-is-MVC\" class=\"headerlink\" title=\"What is MVC?\"></a>What is MVC?</h1><h2 id=\"Introduction\"><a href=\"#Introduction\" class=\"headerlink\" title=\"Introduction\"></a>Introduction</h2><p>Hey everyone, lets talk about the Model-View-Controller (MVC) architecture. Writing programs has always been a combat against rising complexity. MVC exploded in popularity around<br>the 2000s when web programming became popular. Today I’ll be talking about how MVC can be a toolkit in your development. The traditional approach of programming works on<br>Input -&gt; Process -&gt; Output approach while MVC works on Controller → Model -&gt; View.</p>\n<p>Unfortunately, the traditional approach usually means the UI coding, the module data, and the module functions are all written in one file. As one can imagine, as the file grows<br>the costs of maintaining all three parts of the code grows, not to mention its lack of testability. This is where MVC comes in. MVC splits the logic three ways: Input, UI, and Data.<br>The UI logic belongs in the View, the input in the Controller, and the data in the Model.</p>\n<p>This separation helps tremendously as each file is dedicated to implementing one thing. So now instead of implementing a ball of spitfire, you’re implementing three different<br>parts of it, then joining them together.</p>\n<h2 id=\"MVC-Parts\"><a href=\"#MVC-Parts\" class=\"headerlink\" title=\"MVC Parts\"></a>MVC Parts</h2><ul>\n<li><strong>Model</strong>: This is the main logic of the module. Anything that deals with backend stuff that only programmers care about belongs here.</li>\n<li><strong>View</strong>: Views are components that display the UI. Any logic to do with UI goes here. Typically, this reads the model data, and generates the UI based off that.</li>\n<li><strong>Controller</strong>: This component handles user interactions, work with the model, and ultimately select a view to render that displays UI. In an MVC application, the view only displays information;<br>the controller handles and responds to user input and interaction.</li>\n</ul>\n<p>The core concepts of MVC are to split things such that they are not dependent on each other. As such, the Model, View, and Controller can be swapped out anytime.<br>For example, if the View were to be swapped out, it would still be referencing the same Model and Controller.</p>\n<p>The diagram below shows what model takes data from, and is aware of, whom. The Controller takes data from both View and Model, while the View takes data from the Model.</p>\n<p><img src=\"/images/mvc.png\" alt=\"MVC Diagram\"></p>\n<h2 id=\"Variants\"><a href=\"#Variants\" class=\"headerlink\" title=\"Variants\"></a>Variants</h2><p>MVC has been around for a long time now, and there are many variants of MVC flying around. In game development, a popular model is the M-VC (Model - ViewController). In this model,<br>the View and Controller are mixed together because its been implemented in the Engine (Unity for example). So your UI script would be a ViewController, and it will have a reference<br>to the Model it needs to modify.</p>\n<p>Another popular model is the MVVM (Model-View-ViewModel). This model abstracts the View from the Model, putting a ViewModel class in between.</p>\n<p>As with other software patterns, MVC expresses the “core of the solution” to a problem while allowing it to be adapted for each system.<br>Particular MVC designs can vary significantly from the traditional description.</p>\n<h2 id=\"Pros-and-Cons\"><a href=\"#Pros-and-Cons\" class=\"headerlink\" title=\"Pros and Cons\"></a>Pros and Cons</h2><p>Pros:</p>\n<ul>\n<li><strong>Parallel Development</strong> - The MVC modules are all separate from each other, meaning they can be simultaneously developed.</li>\n<li><strong>Better prediction of schedule</strong> - By splitting apart one giant module, a programmer has an easier time estimating the development time of such module.</li>\n<li><strong>Low Coupling</strong> - By its architecture, there is low coupling between all three modules. Swap the View, and you have a UI completely different.</li>\n<li><strong>Scalability</strong> - Responsibility of code is clear, thus it is much easier to maintain and scale the individual modules.</li>\n</ul>\n<p>Cons:</p>\n<ul>\n<li><strong>Low navigability</strong> - The code is now harder to navigate because of a new abstraction, and this abstraction requires the user to first understand how responsibility each part<br>of MVC takes.</li>\n<li><strong>Scattering of code</strong> - Code is now more scattered. Developing a consistent representation in three different compositions can be harder.</li>\n</ul>\n<h2 id=\"Conclusion\"><a href=\"#Conclusion\" class=\"headerlink\" title=\"Conclusion\"></a>Conclusion</h2><p>At the end of the day, MVC is a tool to help decouple features and navigate complexity in code. A hallmark of bad MVC are hacks that allow the Module and View to talk to each<br>other. This is <em>very</em> frowned upon as it completely breaks the reason why the architecture is used. A proper implementation would mean the Model does not even need to be<br>aware of the View, as long as the View is fed a Model.</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"What-is-MVC\"><a href=\"#What-is-MVC\" class=\"headerlink\" title=\"What is MVC?\"></a>What is MVC?</h1><h2 id=\"Introduction\"><a href=\"#Introduction\" class=\"headerlink\" title=\"Introduction\"></a>Introduction</h2><p>Hey everyone, lets talk about the Model-View-Controller (MVC) architecture. Writing programs has always been a combat against rising complexity. MVC exploded in popularity around<br>the 2000s when web programming became popular. Today I’ll be talking about how MVC can be a toolkit in your development. The traditional approach of programming works on<br>Input -&gt; Process -&gt; Output approach while MVC works on Controller → Model -&gt; View.</p>\n<p>Unfortunately, the traditional approach usually means the UI coding, the module data, and the module functions are all written in one file. As one can imagine, as the file grows<br>the costs of maintaining all three parts of the code grows, not to mention its lack of testability. This is where MVC comes in. MVC splits the logic three ways: Input, UI, and Data.<br>The UI logic belongs in the View, the input in the Controller, and the data in the Model.</p>\n<p>This separation helps tremendously as each file is dedicated to implementing one thing. So now instead of implementing a ball of spitfire, you’re implementing three different<br>parts of it, then joining them together.</p>\n<h2 id=\"MVC-Parts\"><a href=\"#MVC-Parts\" class=\"headerlink\" title=\"MVC Parts\"></a>MVC Parts</h2><ul>\n<li><strong>Model</strong>: This is the main logic of the module. Anything that deals with backend stuff that only programmers care about belongs here.</li>\n<li><strong>View</strong>: Views are components that display the UI. Any logic to do with UI goes here. Typically, this reads the model data, and generates the UI based off that.</li>\n<li><strong>Controller</strong>: This component handles user interactions, work with the model, and ultimately select a view to render that displays UI. In an MVC application, the view only displays information;<br>the controller handles and responds to user input and interaction.</li>\n</ul>\n<p>The core concepts of MVC are to split things such that they are not dependent on each other. As such, the Model, View, and Controller can be swapped out anytime.<br>For example, if the View were to be swapped out, it would still be referencing the same Model and Controller.</p>\n<p>The diagram below shows what model takes data from, and is aware of, whom. The Controller takes data from both View and Model, while the View takes data from the Model.</p>\n<p><img src=\"/images/mvc.png\" alt=\"MVC Diagram\"></p>\n<h2 id=\"Variants\"><a href=\"#Variants\" class=\"headerlink\" title=\"Variants\"></a>Variants</h2><p>MVC has been around for a long time now, and there are many variants of MVC flying around. In game development, a popular model is the M-VC (Model - ViewController). In this model,<br>the View and Controller are mixed together because its been implemented in the Engine (Unity for example). So your UI script would be a ViewController, and it will have a reference<br>to the Model it needs to modify.</p>\n<p>Another popular model is the MVVM (Model-View-ViewModel). This model abstracts the View from the Model, putting a ViewModel class in between.</p>\n<p>As with other software patterns, MVC expresses the “core of the solution” to a problem while allowing it to be adapted for each system.<br>Particular MVC designs can vary significantly from the traditional description.</p>\n<h2 id=\"Pros-and-Cons\"><a href=\"#Pros-and-Cons\" class=\"headerlink\" title=\"Pros and Cons\"></a>Pros and Cons</h2><p>Pros:</p>\n<ul>\n<li><strong>Parallel Development</strong> - The MVC modules are all separate from each other, meaning they can be simultaneously developed.</li>\n<li><strong>Better prediction of schedule</strong> - By splitting apart one giant module, a programmer has an easier time estimating the development time of such module.</li>\n<li><strong>Low Coupling</strong> - By its architecture, there is low coupling between all three modules. Swap the View, and you have a UI completely different.</li>\n<li><strong>Scalability</strong> - Responsibility of code is clear, thus it is much easier to maintain and scale the individual modules.</li>\n</ul>\n<p>Cons:</p>\n<ul>\n<li><strong>Low navigability</strong> - The code is now harder to navigate because of a new abstraction, and this abstraction requires the user to first understand how responsibility each part<br>of MVC takes.</li>\n<li><strong>Scattering of code</strong> - Code is now more scattered. Developing a consistent representation in three different compositions can be harder.</li>\n</ul>\n<h2 id=\"Conclusion\"><a href=\"#Conclusion\" class=\"headerlink\" title=\"Conclusion\"></a>Conclusion</h2><p>At the end of the day, MVC is a tool to help decouple features and navigate complexity in code. A hallmark of bad MVC are hacks that allow the Module and View to talk to each<br>other. This is <em>very</em> frowned upon as it completely breaks the reason why the architecture is used. A proper implementation would mean the Model does not even need to be<br>aware of the View, as long as the View is fed a Model.</p>\n"},{"title":"Unity Marching Cubes Terrain Generation","author":"Jonathan Bourim, Calin Gavriliuc","date":"2021-01-02T01:01:01.000Z","_content":"\n# Background\n\n---\n\n<style>\n.child{\n    width:  60%;\n}\n\n@media screen and (max-width: 600px) {\n  .child{\n      width:  100%;\n  }\n}\n\n.desktop-70-mobile-100{\n    width:  70%;\n}\n\n@media screen and (max-width: 600px) {\n  .desktop-70-mobile-100{\n      width:  100%;\n  }\n}\n\n.desktop-50-mobile-100{\n    width:  50%;\n}\n\n@media screen and (max-width: 600px) {\n  .desktop-50-mobile-100{\n      width:  100%;\n  }\n}\n</style>\n\n<script>\n$( document ).ready(function() {\n  var cw = $('.child').width();\n  $('.child').css({\n      'height': cw + 'px'\n  });\n});\n</script>\n\n## About the Authors\n\nCalin Gavriliuc: Engine Programmer  \nJonathan Bourim: Graphics Engineer & Engine Programmer\n\nWe are Computer Science students at the DigiPen Institute of Technology, and have been working on game projects together for several years.\n\n[Here](https://store.steampowered.com/search/?developer=Handshake%20Firm) are some game we have worked on:\n![ArcApellago](/images/ArcApellago.jpg)\n![DeltaBlade2700](/images/DeltaBlade2700.jpg)\n\n## Introduction\n\nProject Cleanser is a year-long team game project that we've been working on together. It's a sandbox game set on a large planet, where the player hunts, digs, and upgrades their equipment to challenge the core at the center of the world.\n\nWhile we were brainstorming ideas for our new, year-long game project, we encountered many interesting videos showcasing voxel techniques, such as procedural world generation and deformation.\n\nInspired by Astroneer, we decided to implement a similar method of terrain generation and deformation for our project.\n\n[Some Inspiration](https://www.youtube.com/watch?v=NG1gJvdCE4Q)\n\n## What Is It\n\n### Voxels\n\nVoxels are a volumetric representation of a point in 3D space. While pixels are representative of data in a small **area**, voxels are representative of data in a small **volume**. These values exist on a 3D grid, and have each point in that grid set to a particular value. With our goal being to make terrain, we used these values to determine the density of the terrain at that point.\nDensity for our volume means it exists in one of two states, **filled** (part of the ground), or **empty** (air).\n\n### Cube Marched Terrain Generation\n\nThe marching cubes algorithm is a fast way to generate a polygonal mesh from a height/density field. We use this algorithm to generate triangles for a mesh from a density field. It is a relatively simple, fast, and efficient algorithm that has been used in many applications.\n\nThe end result can be seen in the following video.\n\n<p align=\"center\">\n<video playsinline autoplay loop muted controls class=\"desktop-50-mobile-100\">\n  <source src=\"/images/CubeMarchingSculpting.webm\" type=\"video/webm\">\n  Your browser does not support the video tag.\n</video>\n</p>\n\n## Goals & Constraints\n\nFor our terrain to function in our environment, we constructed our systems with several priorities in mind:\n\n- Multi-threading\n- Load Balancing\n- Dynamic Loading\n- Determinism / Seeding\n- Spherical Terrain\n\n**Multi-threading:**\n\n- Due to the gargantuan number of math operations that occur when our terrain is generated or modified, performance is the primary concern of this implementation.\n- We must leverage Unity's Job system for multi-threading to maximize the performance of our terrain generation.\n\n**Load Balancing:**\n\n- As we are generating terrain for a game, it is important to load terrain quickly but also throttle operations as to not overload the user's hardware and reduce FPS to an unplayable level.\n\n**Dynamic Loading:**\n\n- Our world is a large, planet-like environment. As voxels are stored values representing our world, those values must be stored somewhere.\n- We quickly approach the limitations of modern hardware if we store all of these values in our active memory.  \n\n**Determinism / Seeding:**\n\n- We generate terrain with the use of randomization tools such as noise functions. With that, there is a decision between a uniquely generated new world, and a randomly generated world that is made consistent by the seed that it is given.\n- Our target was the consistent world, as it allows us to leverage Unity's editor to place objects into our world non-procedurally.\n\n**Spherical Terrain:**\n\n- As our world is a spherical planet, we needed the ability generate terrain in a radial manner. This includes developing a spherical, mountainous surface with a cavernous core.\n\n# Implementation\n\n---\nThe following is a simplified overview of the pipeline:\n![Terrain Manager Flow Chart](/images/TerrainManagerFlowChart.png)\n\n## Chunks\n\nIn the above examples, we have shown visual representations of our density values, but what is assigning them their mesh and position in the world?\nWe use a type we call **Chunks** to store this data and to pass it through our pipelines. In essence, a chunk is a single cube that contains a batch of voxels in the world.\nChunks contain the following information:  \n\n```cs\n// Chunk coordinate representing its position among all chunks\npublic int position;\n\n// Density of each voxel\npublic NativeArray<float> densities;\n// Resource type of each voxel (iron, stone, etc)\npublic NativeArray<Resource.Type> resources;\n\n// Mesh data (updates on any voxel change)\npublic NativeList<float3> vertices;\npublic NativeList<int> triangles;\npublic NativeList<float3> normals;\npublic NativeList<Color> colors;\n\n// Level of detail of the chunk\n// Best LOD being 1\n// Must be powers of 2\npublic int lod;\n\n// If the chunk has changed since it was loaded\n// For checking if it should be saved on unload\npublic bool hasChanged; \n```\n\nThe data buffers are Unity's Native structures (C++ InterOp) to make use of the Burst Compiler.\n\n## Marching Cubes Algorithm\n\n### Triangulation\n\nAs mentioned above, the marching cube algorithm utilizes voxels to determine the density of a particular volume. This is interpreted as whether or not that point is part of the surface of our terrain. If we take the base case, a single voxel, we can look at its corner points to determine the triangle configuration of the cube that the voxel encompasses.\n\nThese triangle configurations come in 15 variants:\n\n<img src=\"/images/MarchingCubesConfigs.png\" width=\"60%\"/>\n\nThe orange points at the corners indicate that they are part of the ground, while the empty corners are air. If we extend this idea to a larger grid, these triangles will connect with one another to form the basis of the terrain depending on the configuration of these values.  \n\n![Marching Example](/images/MarchingExample.png)\n\nThe above image was constructed by setting all the voxels' density values within a spherical radius of the center of the sphere to +1 (ground / filled state), and outside of the radius to -1 (air / empty state). The algorithm considers the transition between the ground (positive values) and the air (negative values) to be where the surface manifests, which is why our surface is a radial shape from the center of the sphere.\n\n### Smoothing\n\nNow we have a solid terrain to work with, but something is missing. What about the smooth terrain shown in the video at the top of this page, the sort of terrain you might see in Astroneer? The example above is when you treat your values as a boolean, either representing a value below the surface or above it. However, if we use these values to represent a gradient of density from one voxel to the next, we can utilize interpolation to alter the angle of the triangles we are constructing.\n\n![Marching Example Smooth](/images/MarchingExampleSmooth.png)\n\nOne method of doing so is by setting the density values to a gradient ranging from +1 to -1, where +1 is the center of the sphere, 0 is the surface, and -1 is the boundary of our voxel grid. In this case, the boundary would be `2 * radius` or the `diameter` of the \"world sphere\".\n\n![Marching Cubes Density Gradient](/images/MarchingCubesDensityGradient.png)\n\nAnother method of achieving this effect is through a similar technique. Instead of treating the whole \"world sphere\" as a gradient, only treat the region around the surface as a gradient. This becomes especially useful when applied in a game setting since most nodes are either `1` or `-1` and not a floating point value.\n\n![Marching Cubes Density Gradient](/images/MarchingCubesDensityGradientEnhanced.png)\n\nThis diagram shows how a surface is interpolated between two vertices with varying density values.\n\n<img src=\"/images/MarchingCubesInterpolation.png\" width=\"60%\"/>\n<!--- Source link for the image above --->\n<a href=\"http://jamie-wong.com/2014/08/19/metaballs-and-marching-squares/\">\n  <p style=\"text-align:center\">\n  Image Source\n  </p>\n</a>\n\nThis, following the interpolation code, will achieve the smoothing explained above:\n\n```cs\n    float3 InterpolateVerts(float3 vertex1, float3 vertex2, float densityValue1, float densityValue2)\n    {\n        // Interpolate from first vertex to second vertex relative to density difference\n        float t = (-densityValue1) / (densityValue2 - densityValue1);\n        return vertex1 + t * (vertex2 - vertex1);\n    }\n```\n\n## Chunk Generation\n\n![Terrain Manager Flow Chart](/images/TerrainManagerFlowChartRequestChunk.png)\n\nNow that we have our data container, and a method to act on that data, we need to fill it with the data it requires to function. Upon being requested, the chunk's density values are generated and the chunk goes through a two-step process of executing the marching cubes algorithm and mesh construction.\n\nFirst, we use the marching cubes algorithm to identify the vertices, triangles, normals of each voxel during which we pick vertex colors. Then, we construct the mesh and bake the physics from the resulting data.\n\n### Stitching and Sharing Chunk Edge Data\n\n<!--\n**TODO**\n- voxels occupy the regions between nodes\n- thus voxels share edges\n- In a multithreaded environment, it is important to package chunks as self-contained as to prevent read & write race conditions\n- Pros vs cons of unique edges vs duplicated data (i.e. memory vs multi-threading benefits)\n- Tearing due to sharing of chunk data (in some cases such as bad unity collision checks)\n-->\n\nAn example of where one would need to be careful with duplication of data is **deformation**. Say if you were on the corner of several chunks sharing an edge, and you altered the density values of each of those chunks at different rates, that would break the idea that the values were duplicated. What results visually is a tearing effect, a gap in between the chunks. This requires additional attention to the synchronicity of the logic operating on the voxel data. \n\n![Voxel Tearing](/images/VoxelTearing.png)\n\n- Requirement of having to edit chunk edges only when all neighboring chunks are loaded\n\n<!--\n### Chunk Terrain Generation\n***TODO***\n-->\n\n### Chunk Loading\n\n![Chunk Loader Flow Chart](/images/TerrainManagerFlowChartChunkLoader.png)\n\nNow that we can generate chunks that also look like interesting terrain, we need a way to selectively pick which chunks to load as to not overwhelm a user's computer with generating an entire world and expecting it all to fit in their RAM. We call this chunk loading. Similarly, this is also applied to unloading chunks.\n\nWe do this by loading a `2n` by `2n` by `2n` cube around the player. You can take `n` number of chunks in each axis (`[x+n, x-n]`, `[y+n, y-n]`, and `[z+n, z-n]`) outward from the player and request them to be loaded.  \nSimilarly if a loaded chunk falls outside of this cube, unload it.\n\n![Chunk Loading Distances](/images/ChunkLoadingDistances.png)\n\nWhen loading and unloading chunks, it was important to remember that chunks share edge data so borders of chunks cannot be edited without neighboring chunks being loaded first to preserve this \"synced\" state.\n\n### Chunk Serialization\n\n![Terrain Manager Flow Chart Terrain Serializer](/images/TerrainManagerFlowChartTerrainSerializer.png)\n\nFor our implementation, we used a simple approach for storing chunks to a file. Given a known size of a chunk (n by n by n nodes), we can read and write entire 3D arrays of data as their binary representation. This is done for both the density and resource values.  \n\nIt should be noted that, as a trivial form of optimization, only chunks changed by the player are saved to the disk. Since our terrain generation is deterministic and faster than loading chunks, it is faster to re-generate the chunk on request compared to loading that chunk from the disk. This, in return, also saves on disk space.\n\nThese load and unload requests are performed within Unity Jobs to further utilize the player's CPU cores from a multithreaded approach and to keep consistency with the rest of the systems.\n\n### Performance\n\nDue to real-time gameplay restrictions and the amount of terrain a player is required to load, chunk generation/loading/marching needs to be highly optimized.\n\nAs this is one of the most performance-critical portions of this system, we use Unity's Job system to multi-thread the execution of this code. Originally, we had experimented with compute shader pipelines, which is faster in normal circumstances. However, after performance testing, Unity's Burst Compiler in conjunction with the job system has outpaced these compute pipelines due to the overhead of large data buffer I/O with the GPU. The overhead of I/O was larger than the time for operations to be performed on that buffer, ultimately resulting in CPU-based computation being faster.\n\n**Major sources of optimization:**\n\n- Chunk Stages\n- Cross-Frame Work\n- Maximizing Usage & Throttling\n- Priority Queueing\n- Level Of Detail (LOD)\n\nThe following is frame-by-frame profiling of the chunk processing system using multiple distinct job stages and cross-frame job completion of the chunk request pipeline (after optimization):\n![Terrain Manager Flow Chart](/images/TerrainManagerJobSystem.png)\n\n#### Chunk Stages\n\nKey Terms:\n\n- **Frame**: One game processing frame / update loop.\n- **Work State**: One of three stages a chunk will go through to be processed fully.\n- **Work State Loop**: One loop of all three work state steps.\n\nOur system uses three work states for processing chunks. These work states only allow a certain type, and by extension a certain amount, of work to be done on chunks for any given grouping of frames.\nThis technique greatly reduces lag spikes a user will experience from loading chunks.\n\nIf a work state is completed early, the system will move on to the next work state without waiting for the full-frame count.\n\nFor any given frame, only process one of three work states:\n\n```cs\n// Do the required work for this frame\nProcessChunks();\n\n// If the current \"work state\" is still being processed, do not move to the next work state\nif (!ProcessingChunks())\n{ \n  // Move on to the next \"work state\" for next frame\n  _workState = _workState switch {\n    WORK_STATE.FILL => WORK_STATE.MARCH, // Generate/Load/Populate chunk with data\n    WORK_STATE.MARCH => WORK_STATE.MESH, // Cube march the chunk\n    WORK_STATE.MESH => WORK_STATE.FILL,  // Generate the chunk's mesh\n    _ => _workState\n  };\n}\n```\n\nIt should be noted that, despite this optimization being applied, the nature of this game requires some chunks to be processed immediately. For example, if a player deforms/destroys part of the terrain, the changed chunks must be processed immediately as to not produce visual lag to the user. These chunks are \"fast-forwarded\" through this system and are processed within one frame.\n\n#### Cross-Frame Work\n\nKey Terms:\n\n- **Processing Spike**: A period of higher stress on the CPU, often causing visual lag/\"jumps\" to the user.\n\nIn general, each work stage will take a maximum of three frames. This technique gives jobs the ability to span across multiple frames, if needed, causing processing spikes on the CPU to \"average out\".  \n\n#### Maximizing Usage & Throttling\n\nKey Terms:\n\n- **Job's Average Processing Requirements**: The amount of work/time a given job takes/requires when being processed by the CPU. Generally, this is a rough estimate.\n\nAs with the previously mentioned techniques, it is important to maximize usage of the CPU while also not overloading it. Given a set of chunks to be processed, instead of computing all of them in one go, breaking up that set into batches based on CPU speed / CPU core count / a job's average processing requirements is a good way to determine how many chunks to process in one complete work state loop.\n\nThis optimization technique is most effective when the user loads _many_ chunks at once, such as when they first load the world.\n\n#### Priority Queueing\n\nKey Terms:\n\n- **High Priority Chunk Request**: A chunk that needs to be processed by the end of the _current_ frame.\n- **Low Priority Chunk Request**: A chunk that needs to be processed as fast as possible, with minimal lag.\n\nDeciding which chunks should be processed first was briefly mentioned above with fast-forwarding, but it is, in reality, more complicated.\n\nOnce a chunk is requested (either high or low priority), the system then sorts it into a queue based on current queued chunk priorities and will update priorities each frame, as needed.\n\nThe following is a general set of rules we followed when implementing chunk processing priority queueing:\n\n- High priority chunks:\n  - No need to sort these requested chunks as they are _all_ processing that frame.\n  - Always pulled from the queue by the system _before_ low priority chunks\n- Low priority chunks:\n  - Sorted by a weight which is usually the squared distance to the player as these chunks usually come from chunk loading\n  - Pulled from the queue by the system when there are not enough high priority chunks to process\n\nThe following code reflects these set of rules:\n\n```cs\n// Grab high priority chunks (processed this frame)\nwhile (_chunksToRegenerate.HighPriorityCount > 0)\n  // Grab any high priority chunk\n  _chunksToRegeneratePriorityBatch.Add(_chunksToRegenerate.Pop());\n\n// If at the start of a new work state loop\nif (_workState == WORK_STATE.FILL)\n  // While there is still space to fill for the max job count - high priority chunk count\n  while (_chunksToRegenerateBatch.Count < _maxJobCount && _chunksToRegenerate.LowPriorityCount > 0)\n    // Pop the next item from the priority queue, sorted by distance to player\n    _chunksToRegenerateBatch.Add(_chunksToRegenerate.Pop());\n```\n\nA rough example of 2D priority queueing, a cross-section of the 3D chunk loaded cube, is demonstrated as an interactive demo below. Move your cursor around to see which chunks have priority to be loaded relative to your cursor.\n\n**Note:** This demo's source code does not reflect the project's implementation. It is purely for a visual understanding of the chunk loading concept.\n\n<p align=\"center\">\n<iframe class=\"child\" src=\"https://www.openprocessing.org/sketch/1052217/embed/\"></iframe>\n</p>\n\nThe maximum number of chunks a three-stage loop can process is given by the following:  \n`Max(Number Of High Priority Chunk Count, Number Of Reasonable Chunks Per Stage Loop)`  \nThat is to say that high priority chunks are always processed with low priority chunks filling in any free slots.\n\nUsing a priority queue and updating weights as needed, you get responsive chunk loading that can adapt quickly to, for example, changes in player position:\n\n<p align=\"center\">\n<video playsinline autoplay loop muted controls class=\"desktop-70-mobile-100\">\n  <source src=\"/images/TerrainChunkPriorityLoading.webm\" type=\"video/webm\">\n  Your browser does not support the video tag.\n</video>\n</p>\n\nOnce applying a similar technique to chunk unloading, you get fluid and responsive terrain.\n\n<p align=\"center\">\n<video playsinline autoplay loop muted controls class=\"desktop-70-mobile-100\">\n  <source src=\"/images/TerrainChunkPriorityLoadingUnloading.webm\" type=\"video/webm\">\n  Your browser does not support the video tag.\n</video>\n</p>\n\n#### Level Of Detail (LOD)\n\nKey Terms:\n\n- **Level of Detail**: Also known as LOD, it is the amount (level) of data (detail) you are choosing to display to the user. This is often used on far-away objects since it is the same to the user visually but faster to compute.\n\nGiven our grid-based voxel terrain, LOD was trivial to implement on a basic level. Since our chunks are 16x16x16, LOD can be a power of two to reduce the amount of data that needs to be computed/rendered out of this chunk.\n\nAs a simple example, take the following 2D grid of 16 voxels, 17 nodes:\n\n**Key:**\n\n- **Purple Circles**: Density data nodes.\n- **Black Squares**: Voxels generated from corner nodes.\n\n<table width=\"100%\">\n  <tr>\n    <th>LOD of 1:</th>\n    <th>LOD of 2:</th>\n    <th>LOD of 4:</th>\n  </tr>\n  <tr>\n    <td><img src=\"/images/CubeMarchingLOD1.png\" alt=\"Cube Marching LOD 1\" width=\"100%\"/></td>\n    <td><img src=\"/images/CubeMarchingLOD2.png\" alt=\"Cube Marching LOD 2\" width=\"100%\"/></td>\n    <td><img src=\"/images/CubeMarchingLOD4.png\" alt=\"Cube Marching LOD 4\" width=\"100%\"/></td>\n  </tr>\n</table>\n\nAs can be seen, voxels sample from fewer nodes, but are scaled to take up the same amount of space.\n\nThe LOD gradients shown below demonstrate this logic applied to the terrain.\n\n<table width=\"100%\">\n  <tr>\n    <th>Smooth Sphere LOD Gradient:</th>\n    <th>Noisy Sphere LOD Gradient</th>\n  </tr>\n  <tr>\n    <td><img src=\"/images/LODSmoothSphere.png\" alt=\"Smooth Sphere LOD Gradient:\" width=\"500px\"/></td>\n    <td><img src=\"/images/LODNoisySphere.png\" alt=\"Noisy Sphere LOD Gradient\" width=\"500px\"/></td>\n  </tr>\n</table>\n\nDespite promising results, you would need to apply an algorithm similar to [TransVoxel](https://transvoxel.org/) to implement a more sophisticated solution that doesn't generate holes between differing LOD levels. As of currently, we do not implement this algorithm.\n\n<!--\nTODO:\n- Resource collection\n-->\n\n## Terrain Features\n\n### Terrain / Voxel Manipulation\n\nWhen we manipulate our voxel terrain, we alter the density values in an area of influence.\nIn our game, we use a spherical brush to accomplish this, resulting in spherical cutouts of the terrain at the target area.\n\n<p align=\"center\">\n<video playsinline autoplay loop muted controls class=\"desktop-70-mobile-100\">\n  <source src=\"/images/VoxelManipulation.webm\" type=\"video/webm\">\n  Your browser does not support the video tag.\n</video>\n</p>\n\nIn the example above, you can see both additive and subtractive operations. Thankfully, these translate straightforwardly to adding and subtracting from the density values in our target area.\n\nBelow is an interactive demo of the logic functioning in a 2D variant. Mouse over the area to subtract or add from a given area, altering the terrain. These values are either 1 or -1, representing a filled or unfilled area, respectively. As there is no gradient, this will result in unsmooth terrain.\n\nClick the left mouse button to toggle addition/subtraction.\n\n<p align=\"center\"><iframe class=\"child\" src=\"https://www.openprocessing.org/sketch/1051758/embed/\" width=\"500vh\" height=\"700vh\"></iframe></p>\n\n### Editor Mode\n\nProcedural generation is typically executed at runtime. In other words, our voxel terrain would only be visible upon launching the game into Play Mode.\nHowever, this is problematic in the case where we would like to edit our scene. How would determine where to place a sign sticking out of the ground, or a treasure chest?\nWe'd need a way to edit the scene with the world already constructed. Our solution is editor-time world loading.  \n\nBy using proximity loading of our chunks as found at runtime, we may move the player around in the scene to load whichever portion is needed to us.\n\n<p align=\"center\">\n<video playsinline autoplay loop muted controls class=\"desktop-70-mobile-100\">\n  <source src=\"/images/EditorMode.webm\" type=\"video/webm\">\n  Your browser does not support the video tag.\n</video>\n</p>\n\nWe track the current state of the Unity editor to determine when to dispose of the memory or create it anew.\nEntering play mode or edit mode will reconstruct the necessary memory for the voxel terrain.\n\n<!--\n# Final Notes\n***TODO***\n~~In conclusion, this project produced an impressive and responsive terrain that makes for great gameplay.~~\n~~In conclusion, the signal disruptor is an award-winning board~~\n\n## Further Implementations\n- Hot-loading\n- \n-->\n\n<!---\n# ---- OTHER: ----\n## Spherical\n\n# EXTRA\n## Process of Creating a Chunk\n\nOnce a chunk entity is created and its position is assigned, it will enter the system chain to be processed in the following order\n\n## Data Generation\n## Cube Marching\n### Solution Lookup\n### Smoothing\n## Mesh Generation\nThe process of mesh generation is split into three steps:\n1) **Create Chunk Mesh**: Create the mesh object, and copy the data to the new mesh\n1) **Bake Chunk Mesh**: Bake the mesh using Unity\\'s `Physics.BakeMesh`\n1) **Set Chunk Mesh**: Create a GameObject, and assign it the new mesh.\nThe reason mesh generation is split into three distinct steps is due to the inability of steps #1 & #3 to be parallelized with burst compilation, while step #2 can be.\n### Creating the Chunk\\'s Mesh\nThis step simply creates the mesh and copies the data from the `IBufferElementData` components to the new mesh.\n\nThis is done without burst and sequentially - due to Unity\\'s `Mesh` being non-blittable.\n### Baking the Chunk\\'s Mesh\n### Setting the Chunk\\'s Mesh\n## Live Editing With Unity Atoms\n## Post Mortem\n\n- Burst-Compiled Unity Jobs\n- Chunk Loading\n- Marching Cubes\n- Unity Atoms\n---\n**NOTE**\nThe cost of using components as flags is not insignificant! The trade-off is knowing what stage any given chunk is at for debugging.\n---\n## Post Mortem\n## Unity ECS\n### Setup\nTo utilize the speed of Unity\\'s provided ECS, chunks were entities that consist of data components and their associated GameObject to store + render the mesh. Along the way, they also get tagged/untagged with \"Flag\" components to tell the next system to operate on them.\nThe ECS chunk, after processing, would contain the following component data:\n![Chunk Components](/images/ChunkComponents.png)\n\n### Why It Didn't Work \nAfter all the work setting up systems, components, and way more, it seemed like the team was constantly fighting Unity ECS to make it fit our needs. System order was impossible to configure, command buffers wouldn't execute on the frames we needed, adding and removing components correctly was complex to manage, and what could run within a system was very restrictive.\n\nDespite this, these problems were not the deal-breaker. Even if all these problems were alleviated, we needed all these systems to process chunk entities within one frame. When the player deforms the terrain, the \"frame rate of deformation\" should run at the same rate as the rest of the game. This was not the case when the systems ran across multiple frames as the deformation would run at a perceived FPS of Frame-Rate / System-Frame-Count and would look choppy.\n\n### The Fix\nLuckily, systems are very similar to Unity's job system which allowed up to transfer over easily.\n-->\n","source":"_posts/terrain-generation.md","raw":"---\ntitle: Unity Marching Cubes Terrain Generation\nauthor: Jonathan Bourim, Calin Gavriliuc\ntags:\n- Unity\n- GameDev\ndate: 2021-01-02 01:01:01\n---\n\n# Background\n\n---\n\n<style>\n.child{\n    width:  60%;\n}\n\n@media screen and (max-width: 600px) {\n  .child{\n      width:  100%;\n  }\n}\n\n.desktop-70-mobile-100{\n    width:  70%;\n}\n\n@media screen and (max-width: 600px) {\n  .desktop-70-mobile-100{\n      width:  100%;\n  }\n}\n\n.desktop-50-mobile-100{\n    width:  50%;\n}\n\n@media screen and (max-width: 600px) {\n  .desktop-50-mobile-100{\n      width:  100%;\n  }\n}\n</style>\n\n<script>\n$( document ).ready(function() {\n  var cw = $('.child').width();\n  $('.child').css({\n      'height': cw + 'px'\n  });\n});\n</script>\n\n## About the Authors\n\nCalin Gavriliuc: Engine Programmer  \nJonathan Bourim: Graphics Engineer & Engine Programmer\n\nWe are Computer Science students at the DigiPen Institute of Technology, and have been working on game projects together for several years.\n\n[Here](https://store.steampowered.com/search/?developer=Handshake%20Firm) are some game we have worked on:\n![ArcApellago](/images/ArcApellago.jpg)\n![DeltaBlade2700](/images/DeltaBlade2700.jpg)\n\n## Introduction\n\nProject Cleanser is a year-long team game project that we've been working on together. It's a sandbox game set on a large planet, where the player hunts, digs, and upgrades their equipment to challenge the core at the center of the world.\n\nWhile we were brainstorming ideas for our new, year-long game project, we encountered many interesting videos showcasing voxel techniques, such as procedural world generation and deformation.\n\nInspired by Astroneer, we decided to implement a similar method of terrain generation and deformation for our project.\n\n[Some Inspiration](https://www.youtube.com/watch?v=NG1gJvdCE4Q)\n\n## What Is It\n\n### Voxels\n\nVoxels are a volumetric representation of a point in 3D space. While pixels are representative of data in a small **area**, voxels are representative of data in a small **volume**. These values exist on a 3D grid, and have each point in that grid set to a particular value. With our goal being to make terrain, we used these values to determine the density of the terrain at that point.\nDensity for our volume means it exists in one of two states, **filled** (part of the ground), or **empty** (air).\n\n### Cube Marched Terrain Generation\n\nThe marching cubes algorithm is a fast way to generate a polygonal mesh from a height/density field. We use this algorithm to generate triangles for a mesh from a density field. It is a relatively simple, fast, and efficient algorithm that has been used in many applications.\n\nThe end result can be seen in the following video.\n\n<p align=\"center\">\n<video playsinline autoplay loop muted controls class=\"desktop-50-mobile-100\">\n  <source src=\"/images/CubeMarchingSculpting.webm\" type=\"video/webm\">\n  Your browser does not support the video tag.\n</video>\n</p>\n\n## Goals & Constraints\n\nFor our terrain to function in our environment, we constructed our systems with several priorities in mind:\n\n- Multi-threading\n- Load Balancing\n- Dynamic Loading\n- Determinism / Seeding\n- Spherical Terrain\n\n**Multi-threading:**\n\n- Due to the gargantuan number of math operations that occur when our terrain is generated or modified, performance is the primary concern of this implementation.\n- We must leverage Unity's Job system for multi-threading to maximize the performance of our terrain generation.\n\n**Load Balancing:**\n\n- As we are generating terrain for a game, it is important to load terrain quickly but also throttle operations as to not overload the user's hardware and reduce FPS to an unplayable level.\n\n**Dynamic Loading:**\n\n- Our world is a large, planet-like environment. As voxels are stored values representing our world, those values must be stored somewhere.\n- We quickly approach the limitations of modern hardware if we store all of these values in our active memory.  \n\n**Determinism / Seeding:**\n\n- We generate terrain with the use of randomization tools such as noise functions. With that, there is a decision between a uniquely generated new world, and a randomly generated world that is made consistent by the seed that it is given.\n- Our target was the consistent world, as it allows us to leverage Unity's editor to place objects into our world non-procedurally.\n\n**Spherical Terrain:**\n\n- As our world is a spherical planet, we needed the ability generate terrain in a radial manner. This includes developing a spherical, mountainous surface with a cavernous core.\n\n# Implementation\n\n---\nThe following is a simplified overview of the pipeline:\n![Terrain Manager Flow Chart](/images/TerrainManagerFlowChart.png)\n\n## Chunks\n\nIn the above examples, we have shown visual representations of our density values, but what is assigning them their mesh and position in the world?\nWe use a type we call **Chunks** to store this data and to pass it through our pipelines. In essence, a chunk is a single cube that contains a batch of voxels in the world.\nChunks contain the following information:  \n\n```cs\n// Chunk coordinate representing its position among all chunks\npublic int position;\n\n// Density of each voxel\npublic NativeArray<float> densities;\n// Resource type of each voxel (iron, stone, etc)\npublic NativeArray<Resource.Type> resources;\n\n// Mesh data (updates on any voxel change)\npublic NativeList<float3> vertices;\npublic NativeList<int> triangles;\npublic NativeList<float3> normals;\npublic NativeList<Color> colors;\n\n// Level of detail of the chunk\n// Best LOD being 1\n// Must be powers of 2\npublic int lod;\n\n// If the chunk has changed since it was loaded\n// For checking if it should be saved on unload\npublic bool hasChanged; \n```\n\nThe data buffers are Unity's Native structures (C++ InterOp) to make use of the Burst Compiler.\n\n## Marching Cubes Algorithm\n\n### Triangulation\n\nAs mentioned above, the marching cube algorithm utilizes voxels to determine the density of a particular volume. This is interpreted as whether or not that point is part of the surface of our terrain. If we take the base case, a single voxel, we can look at its corner points to determine the triangle configuration of the cube that the voxel encompasses.\n\nThese triangle configurations come in 15 variants:\n\n<img src=\"/images/MarchingCubesConfigs.png\" width=\"60%\"/>\n\nThe orange points at the corners indicate that they are part of the ground, while the empty corners are air. If we extend this idea to a larger grid, these triangles will connect with one another to form the basis of the terrain depending on the configuration of these values.  \n\n![Marching Example](/images/MarchingExample.png)\n\nThe above image was constructed by setting all the voxels' density values within a spherical radius of the center of the sphere to +1 (ground / filled state), and outside of the radius to -1 (air / empty state). The algorithm considers the transition between the ground (positive values) and the air (negative values) to be where the surface manifests, which is why our surface is a radial shape from the center of the sphere.\n\n### Smoothing\n\nNow we have a solid terrain to work with, but something is missing. What about the smooth terrain shown in the video at the top of this page, the sort of terrain you might see in Astroneer? The example above is when you treat your values as a boolean, either representing a value below the surface or above it. However, if we use these values to represent a gradient of density from one voxel to the next, we can utilize interpolation to alter the angle of the triangles we are constructing.\n\n![Marching Example Smooth](/images/MarchingExampleSmooth.png)\n\nOne method of doing so is by setting the density values to a gradient ranging from +1 to -1, where +1 is the center of the sphere, 0 is the surface, and -1 is the boundary of our voxel grid. In this case, the boundary would be `2 * radius` or the `diameter` of the \"world sphere\".\n\n![Marching Cubes Density Gradient](/images/MarchingCubesDensityGradient.png)\n\nAnother method of achieving this effect is through a similar technique. Instead of treating the whole \"world sphere\" as a gradient, only treat the region around the surface as a gradient. This becomes especially useful when applied in a game setting since most nodes are either `1` or `-1` and not a floating point value.\n\n![Marching Cubes Density Gradient](/images/MarchingCubesDensityGradientEnhanced.png)\n\nThis diagram shows how a surface is interpolated between two vertices with varying density values.\n\n<img src=\"/images/MarchingCubesInterpolation.png\" width=\"60%\"/>\n<!--- Source link for the image above --->\n<a href=\"http://jamie-wong.com/2014/08/19/metaballs-and-marching-squares/\">\n  <p style=\"text-align:center\">\n  Image Source\n  </p>\n</a>\n\nThis, following the interpolation code, will achieve the smoothing explained above:\n\n```cs\n    float3 InterpolateVerts(float3 vertex1, float3 vertex2, float densityValue1, float densityValue2)\n    {\n        // Interpolate from first vertex to second vertex relative to density difference\n        float t = (-densityValue1) / (densityValue2 - densityValue1);\n        return vertex1 + t * (vertex2 - vertex1);\n    }\n```\n\n## Chunk Generation\n\n![Terrain Manager Flow Chart](/images/TerrainManagerFlowChartRequestChunk.png)\n\nNow that we have our data container, and a method to act on that data, we need to fill it with the data it requires to function. Upon being requested, the chunk's density values are generated and the chunk goes through a two-step process of executing the marching cubes algorithm and mesh construction.\n\nFirst, we use the marching cubes algorithm to identify the vertices, triangles, normals of each voxel during which we pick vertex colors. Then, we construct the mesh and bake the physics from the resulting data.\n\n### Stitching and Sharing Chunk Edge Data\n\n<!--\n**TODO**\n- voxels occupy the regions between nodes\n- thus voxels share edges\n- In a multithreaded environment, it is important to package chunks as self-contained as to prevent read & write race conditions\n- Pros vs cons of unique edges vs duplicated data (i.e. memory vs multi-threading benefits)\n- Tearing due to sharing of chunk data (in some cases such as bad unity collision checks)\n-->\n\nAn example of where one would need to be careful with duplication of data is **deformation**. Say if you were on the corner of several chunks sharing an edge, and you altered the density values of each of those chunks at different rates, that would break the idea that the values were duplicated. What results visually is a tearing effect, a gap in between the chunks. This requires additional attention to the synchronicity of the logic operating on the voxel data. \n\n![Voxel Tearing](/images/VoxelTearing.png)\n\n- Requirement of having to edit chunk edges only when all neighboring chunks are loaded\n\n<!--\n### Chunk Terrain Generation\n***TODO***\n-->\n\n### Chunk Loading\n\n![Chunk Loader Flow Chart](/images/TerrainManagerFlowChartChunkLoader.png)\n\nNow that we can generate chunks that also look like interesting terrain, we need a way to selectively pick which chunks to load as to not overwhelm a user's computer with generating an entire world and expecting it all to fit in their RAM. We call this chunk loading. Similarly, this is also applied to unloading chunks.\n\nWe do this by loading a `2n` by `2n` by `2n` cube around the player. You can take `n` number of chunks in each axis (`[x+n, x-n]`, `[y+n, y-n]`, and `[z+n, z-n]`) outward from the player and request them to be loaded.  \nSimilarly if a loaded chunk falls outside of this cube, unload it.\n\n![Chunk Loading Distances](/images/ChunkLoadingDistances.png)\n\nWhen loading and unloading chunks, it was important to remember that chunks share edge data so borders of chunks cannot be edited without neighboring chunks being loaded first to preserve this \"synced\" state.\n\n### Chunk Serialization\n\n![Terrain Manager Flow Chart Terrain Serializer](/images/TerrainManagerFlowChartTerrainSerializer.png)\n\nFor our implementation, we used a simple approach for storing chunks to a file. Given a known size of a chunk (n by n by n nodes), we can read and write entire 3D arrays of data as their binary representation. This is done for both the density and resource values.  \n\nIt should be noted that, as a trivial form of optimization, only chunks changed by the player are saved to the disk. Since our terrain generation is deterministic and faster than loading chunks, it is faster to re-generate the chunk on request compared to loading that chunk from the disk. This, in return, also saves on disk space.\n\nThese load and unload requests are performed within Unity Jobs to further utilize the player's CPU cores from a multithreaded approach and to keep consistency with the rest of the systems.\n\n### Performance\n\nDue to real-time gameplay restrictions and the amount of terrain a player is required to load, chunk generation/loading/marching needs to be highly optimized.\n\nAs this is one of the most performance-critical portions of this system, we use Unity's Job system to multi-thread the execution of this code. Originally, we had experimented with compute shader pipelines, which is faster in normal circumstances. However, after performance testing, Unity's Burst Compiler in conjunction with the job system has outpaced these compute pipelines due to the overhead of large data buffer I/O with the GPU. The overhead of I/O was larger than the time for operations to be performed on that buffer, ultimately resulting in CPU-based computation being faster.\n\n**Major sources of optimization:**\n\n- Chunk Stages\n- Cross-Frame Work\n- Maximizing Usage & Throttling\n- Priority Queueing\n- Level Of Detail (LOD)\n\nThe following is frame-by-frame profiling of the chunk processing system using multiple distinct job stages and cross-frame job completion of the chunk request pipeline (after optimization):\n![Terrain Manager Flow Chart](/images/TerrainManagerJobSystem.png)\n\n#### Chunk Stages\n\nKey Terms:\n\n- **Frame**: One game processing frame / update loop.\n- **Work State**: One of three stages a chunk will go through to be processed fully.\n- **Work State Loop**: One loop of all three work state steps.\n\nOur system uses three work states for processing chunks. These work states only allow a certain type, and by extension a certain amount, of work to be done on chunks for any given grouping of frames.\nThis technique greatly reduces lag spikes a user will experience from loading chunks.\n\nIf a work state is completed early, the system will move on to the next work state without waiting for the full-frame count.\n\nFor any given frame, only process one of three work states:\n\n```cs\n// Do the required work for this frame\nProcessChunks();\n\n// If the current \"work state\" is still being processed, do not move to the next work state\nif (!ProcessingChunks())\n{ \n  // Move on to the next \"work state\" for next frame\n  _workState = _workState switch {\n    WORK_STATE.FILL => WORK_STATE.MARCH, // Generate/Load/Populate chunk with data\n    WORK_STATE.MARCH => WORK_STATE.MESH, // Cube march the chunk\n    WORK_STATE.MESH => WORK_STATE.FILL,  // Generate the chunk's mesh\n    _ => _workState\n  };\n}\n```\n\nIt should be noted that, despite this optimization being applied, the nature of this game requires some chunks to be processed immediately. For example, if a player deforms/destroys part of the terrain, the changed chunks must be processed immediately as to not produce visual lag to the user. These chunks are \"fast-forwarded\" through this system and are processed within one frame.\n\n#### Cross-Frame Work\n\nKey Terms:\n\n- **Processing Spike**: A period of higher stress on the CPU, often causing visual lag/\"jumps\" to the user.\n\nIn general, each work stage will take a maximum of three frames. This technique gives jobs the ability to span across multiple frames, if needed, causing processing spikes on the CPU to \"average out\".  \n\n#### Maximizing Usage & Throttling\n\nKey Terms:\n\n- **Job's Average Processing Requirements**: The amount of work/time a given job takes/requires when being processed by the CPU. Generally, this is a rough estimate.\n\nAs with the previously mentioned techniques, it is important to maximize usage of the CPU while also not overloading it. Given a set of chunks to be processed, instead of computing all of them in one go, breaking up that set into batches based on CPU speed / CPU core count / a job's average processing requirements is a good way to determine how many chunks to process in one complete work state loop.\n\nThis optimization technique is most effective when the user loads _many_ chunks at once, such as when they first load the world.\n\n#### Priority Queueing\n\nKey Terms:\n\n- **High Priority Chunk Request**: A chunk that needs to be processed by the end of the _current_ frame.\n- **Low Priority Chunk Request**: A chunk that needs to be processed as fast as possible, with minimal lag.\n\nDeciding which chunks should be processed first was briefly mentioned above with fast-forwarding, but it is, in reality, more complicated.\n\nOnce a chunk is requested (either high or low priority), the system then sorts it into a queue based on current queued chunk priorities and will update priorities each frame, as needed.\n\nThe following is a general set of rules we followed when implementing chunk processing priority queueing:\n\n- High priority chunks:\n  - No need to sort these requested chunks as they are _all_ processing that frame.\n  - Always pulled from the queue by the system _before_ low priority chunks\n- Low priority chunks:\n  - Sorted by a weight which is usually the squared distance to the player as these chunks usually come from chunk loading\n  - Pulled from the queue by the system when there are not enough high priority chunks to process\n\nThe following code reflects these set of rules:\n\n```cs\n// Grab high priority chunks (processed this frame)\nwhile (_chunksToRegenerate.HighPriorityCount > 0)\n  // Grab any high priority chunk\n  _chunksToRegeneratePriorityBatch.Add(_chunksToRegenerate.Pop());\n\n// If at the start of a new work state loop\nif (_workState == WORK_STATE.FILL)\n  // While there is still space to fill for the max job count - high priority chunk count\n  while (_chunksToRegenerateBatch.Count < _maxJobCount && _chunksToRegenerate.LowPriorityCount > 0)\n    // Pop the next item from the priority queue, sorted by distance to player\n    _chunksToRegenerateBatch.Add(_chunksToRegenerate.Pop());\n```\n\nA rough example of 2D priority queueing, a cross-section of the 3D chunk loaded cube, is demonstrated as an interactive demo below. Move your cursor around to see which chunks have priority to be loaded relative to your cursor.\n\n**Note:** This demo's source code does not reflect the project's implementation. It is purely for a visual understanding of the chunk loading concept.\n\n<p align=\"center\">\n<iframe class=\"child\" src=\"https://www.openprocessing.org/sketch/1052217/embed/\"></iframe>\n</p>\n\nThe maximum number of chunks a three-stage loop can process is given by the following:  \n`Max(Number Of High Priority Chunk Count, Number Of Reasonable Chunks Per Stage Loop)`  \nThat is to say that high priority chunks are always processed with low priority chunks filling in any free slots.\n\nUsing a priority queue and updating weights as needed, you get responsive chunk loading that can adapt quickly to, for example, changes in player position:\n\n<p align=\"center\">\n<video playsinline autoplay loop muted controls class=\"desktop-70-mobile-100\">\n  <source src=\"/images/TerrainChunkPriorityLoading.webm\" type=\"video/webm\">\n  Your browser does not support the video tag.\n</video>\n</p>\n\nOnce applying a similar technique to chunk unloading, you get fluid and responsive terrain.\n\n<p align=\"center\">\n<video playsinline autoplay loop muted controls class=\"desktop-70-mobile-100\">\n  <source src=\"/images/TerrainChunkPriorityLoadingUnloading.webm\" type=\"video/webm\">\n  Your browser does not support the video tag.\n</video>\n</p>\n\n#### Level Of Detail (LOD)\n\nKey Terms:\n\n- **Level of Detail**: Also known as LOD, it is the amount (level) of data (detail) you are choosing to display to the user. This is often used on far-away objects since it is the same to the user visually but faster to compute.\n\nGiven our grid-based voxel terrain, LOD was trivial to implement on a basic level. Since our chunks are 16x16x16, LOD can be a power of two to reduce the amount of data that needs to be computed/rendered out of this chunk.\n\nAs a simple example, take the following 2D grid of 16 voxels, 17 nodes:\n\n**Key:**\n\n- **Purple Circles**: Density data nodes.\n- **Black Squares**: Voxels generated from corner nodes.\n\n<table width=\"100%\">\n  <tr>\n    <th>LOD of 1:</th>\n    <th>LOD of 2:</th>\n    <th>LOD of 4:</th>\n  </tr>\n  <tr>\n    <td><img src=\"/images/CubeMarchingLOD1.png\" alt=\"Cube Marching LOD 1\" width=\"100%\"/></td>\n    <td><img src=\"/images/CubeMarchingLOD2.png\" alt=\"Cube Marching LOD 2\" width=\"100%\"/></td>\n    <td><img src=\"/images/CubeMarchingLOD4.png\" alt=\"Cube Marching LOD 4\" width=\"100%\"/></td>\n  </tr>\n</table>\n\nAs can be seen, voxels sample from fewer nodes, but are scaled to take up the same amount of space.\n\nThe LOD gradients shown below demonstrate this logic applied to the terrain.\n\n<table width=\"100%\">\n  <tr>\n    <th>Smooth Sphere LOD Gradient:</th>\n    <th>Noisy Sphere LOD Gradient</th>\n  </tr>\n  <tr>\n    <td><img src=\"/images/LODSmoothSphere.png\" alt=\"Smooth Sphere LOD Gradient:\" width=\"500px\"/></td>\n    <td><img src=\"/images/LODNoisySphere.png\" alt=\"Noisy Sphere LOD Gradient\" width=\"500px\"/></td>\n  </tr>\n</table>\n\nDespite promising results, you would need to apply an algorithm similar to [TransVoxel](https://transvoxel.org/) to implement a more sophisticated solution that doesn't generate holes between differing LOD levels. As of currently, we do not implement this algorithm.\n\n<!--\nTODO:\n- Resource collection\n-->\n\n## Terrain Features\n\n### Terrain / Voxel Manipulation\n\nWhen we manipulate our voxel terrain, we alter the density values in an area of influence.\nIn our game, we use a spherical brush to accomplish this, resulting in spherical cutouts of the terrain at the target area.\n\n<p align=\"center\">\n<video playsinline autoplay loop muted controls class=\"desktop-70-mobile-100\">\n  <source src=\"/images/VoxelManipulation.webm\" type=\"video/webm\">\n  Your browser does not support the video tag.\n</video>\n</p>\n\nIn the example above, you can see both additive and subtractive operations. Thankfully, these translate straightforwardly to adding and subtracting from the density values in our target area.\n\nBelow is an interactive demo of the logic functioning in a 2D variant. Mouse over the area to subtract or add from a given area, altering the terrain. These values are either 1 or -1, representing a filled or unfilled area, respectively. As there is no gradient, this will result in unsmooth terrain.\n\nClick the left mouse button to toggle addition/subtraction.\n\n<p align=\"center\"><iframe class=\"child\" src=\"https://www.openprocessing.org/sketch/1051758/embed/\" width=\"500vh\" height=\"700vh\"></iframe></p>\n\n### Editor Mode\n\nProcedural generation is typically executed at runtime. In other words, our voxel terrain would only be visible upon launching the game into Play Mode.\nHowever, this is problematic in the case where we would like to edit our scene. How would determine where to place a sign sticking out of the ground, or a treasure chest?\nWe'd need a way to edit the scene with the world already constructed. Our solution is editor-time world loading.  \n\nBy using proximity loading of our chunks as found at runtime, we may move the player around in the scene to load whichever portion is needed to us.\n\n<p align=\"center\">\n<video playsinline autoplay loop muted controls class=\"desktop-70-mobile-100\">\n  <source src=\"/images/EditorMode.webm\" type=\"video/webm\">\n  Your browser does not support the video tag.\n</video>\n</p>\n\nWe track the current state of the Unity editor to determine when to dispose of the memory or create it anew.\nEntering play mode or edit mode will reconstruct the necessary memory for the voxel terrain.\n\n<!--\n# Final Notes\n***TODO***\n~~In conclusion, this project produced an impressive and responsive terrain that makes for great gameplay.~~\n~~In conclusion, the signal disruptor is an award-winning board~~\n\n## Further Implementations\n- Hot-loading\n- \n-->\n\n<!---\n# ---- OTHER: ----\n## Spherical\n\n# EXTRA\n## Process of Creating a Chunk\n\nOnce a chunk entity is created and its position is assigned, it will enter the system chain to be processed in the following order\n\n## Data Generation\n## Cube Marching\n### Solution Lookup\n### Smoothing\n## Mesh Generation\nThe process of mesh generation is split into three steps:\n1) **Create Chunk Mesh**: Create the mesh object, and copy the data to the new mesh\n1) **Bake Chunk Mesh**: Bake the mesh using Unity\\'s `Physics.BakeMesh`\n1) **Set Chunk Mesh**: Create a GameObject, and assign it the new mesh.\nThe reason mesh generation is split into three distinct steps is due to the inability of steps #1 & #3 to be parallelized with burst compilation, while step #2 can be.\n### Creating the Chunk\\'s Mesh\nThis step simply creates the mesh and copies the data from the `IBufferElementData` components to the new mesh.\n\nThis is done without burst and sequentially - due to Unity\\'s `Mesh` being non-blittable.\n### Baking the Chunk\\'s Mesh\n### Setting the Chunk\\'s Mesh\n## Live Editing With Unity Atoms\n## Post Mortem\n\n- Burst-Compiled Unity Jobs\n- Chunk Loading\n- Marching Cubes\n- Unity Atoms\n---\n**NOTE**\nThe cost of using components as flags is not insignificant! The trade-off is knowing what stage any given chunk is at for debugging.\n---\n## Post Mortem\n## Unity ECS\n### Setup\nTo utilize the speed of Unity\\'s provided ECS, chunks were entities that consist of data components and their associated GameObject to store + render the mesh. Along the way, they also get tagged/untagged with \"Flag\" components to tell the next system to operate on them.\nThe ECS chunk, after processing, would contain the following component data:\n![Chunk Components](/images/ChunkComponents.png)\n\n### Why It Didn't Work \nAfter all the work setting up systems, components, and way more, it seemed like the team was constantly fighting Unity ECS to make it fit our needs. System order was impossible to configure, command buffers wouldn't execute on the frames we needed, adding and removing components correctly was complex to manage, and what could run within a system was very restrictive.\n\nDespite this, these problems were not the deal-breaker. Even if all these problems were alleviated, we needed all these systems to process chunk entities within one frame. When the player deforms the terrain, the \"frame rate of deformation\" should run at the same rate as the rest of the game. This was not the case when the systems ran across multiple frames as the deformation would run at a perceived FPS of Frame-Rate / System-Frame-Count and would look choppy.\n\n### The Fix\nLuckily, systems are very similar to Unity's job system which allowed up to transfer over easily.\n-->\n","slug":"terrain-generation","published":1,"updated":"2021-01-28T06:48:52.333Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckkghycu8000809o13rgx25y9","content":"<h1 id=\"Background\"><a href=\"#Background\" class=\"headerlink\" title=\"Background\"></a>Background</h1><hr>\n<style>\n.child{\n    width:  60%;\n}\n\n@media screen and (max-width: 600px) {\n  .child{\n      width:  100%;\n  }\n}\n\n.desktop-70-mobile-100{\n    width:  70%;\n}\n\n@media screen and (max-width: 600px) {\n  .desktop-70-mobile-100{\n      width:  100%;\n  }\n}\n\n.desktop-50-mobile-100{\n    width:  50%;\n}\n\n@media screen and (max-width: 600px) {\n  .desktop-50-mobile-100{\n      width:  100%;\n  }\n}\n</style>\n\n<script>\n$( document ).ready(function() {\n  var cw = $('.child').width();\n  $('.child').css({\n      'height': cw + 'px'\n  });\n});\n</script>\n\n<h2 id=\"About-the-Authors\"><a href=\"#About-the-Authors\" class=\"headerlink\" title=\"About the Authors\"></a>About the Authors</h2><p>Calin Gavriliuc: Engine Programmer<br>Jonathan Bourim: Graphics Engineer &amp; Engine Programmer</p>\n<p>We are Computer Science students at the DigiPen Institute of Technology, and have been working on game projects together for several years.</p>\n<p><a href=\"https://store.steampowered.com/search/?developer=Handshake%20Firm\">Here</a> are some game we have worked on:<br><img src=\"/images/ArcApellago.jpg\" alt=\"ArcApellago\"><br><img src=\"/images/DeltaBlade2700.jpg\" alt=\"DeltaBlade2700\"></p>\n<h2 id=\"Introduction\"><a href=\"#Introduction\" class=\"headerlink\" title=\"Introduction\"></a>Introduction</h2><p>Project Cleanser is a year-long team game project that we’ve been working on together. It’s a sandbox game set on a large planet, where the player hunts, digs, and upgrades their equipment to challenge the core at the center of the world.</p>\n<p>While we were brainstorming ideas for our new, year-long game project, we encountered many interesting videos showcasing voxel techniques, such as procedural world generation and deformation.</p>\n<p>Inspired by Astroneer, we decided to implement a similar method of terrain generation and deformation for our project.</p>\n<p><a href=\"https://www.youtube.com/watch?v=NG1gJvdCE4Q\">Some Inspiration</a></p>\n<h2 id=\"What-Is-It\"><a href=\"#What-Is-It\" class=\"headerlink\" title=\"What Is It\"></a>What Is It</h2><h3 id=\"Voxels\"><a href=\"#Voxels\" class=\"headerlink\" title=\"Voxels\"></a>Voxels</h3><p>Voxels are a volumetric representation of a point in 3D space. While pixels are representative of data in a small <strong>area</strong>, voxels are representative of data in a small <strong>volume</strong>. These values exist on a 3D grid, and have each point in that grid set to a particular value. With our goal being to make terrain, we used these values to determine the density of the terrain at that point.<br>Density for our volume means it exists in one of two states, <strong>filled</strong> (part of the ground), or <strong>empty</strong> (air).</p>\n<h3 id=\"Cube-Marched-Terrain-Generation\"><a href=\"#Cube-Marched-Terrain-Generation\" class=\"headerlink\" title=\"Cube Marched Terrain Generation\"></a>Cube Marched Terrain Generation</h3><p>The marching cubes algorithm is a fast way to generate a polygonal mesh from a height/density field. We use this algorithm to generate triangles for a mesh from a density field. It is a relatively simple, fast, and efficient algorithm that has been used in many applications.</p>\n<p>The end result can be seen in the following video.</p>\n<p align=\"center\">\n<video playsinline autoplay loop muted controls class=\"desktop-50-mobile-100\">\n  <source src=\"/images/CubeMarchingSculpting.webm\" type=\"video/webm\">\n  Your browser does not support the video tag.\n</video>\n</p>\n\n<h2 id=\"Goals-amp-Constraints\"><a href=\"#Goals-amp-Constraints\" class=\"headerlink\" title=\"Goals &amp; Constraints\"></a>Goals &amp; Constraints</h2><p>For our terrain to function in our environment, we constructed our systems with several priorities in mind:</p>\n<ul>\n<li>Multi-threading</li>\n<li>Load Balancing</li>\n<li>Dynamic Loading</li>\n<li>Determinism / Seeding</li>\n<li>Spherical Terrain</li>\n</ul>\n<p><strong>Multi-threading:</strong></p>\n<ul>\n<li>Due to the gargantuan number of math operations that occur when our terrain is generated or modified, performance is the primary concern of this implementation.</li>\n<li>We must leverage Unity’s Job system for multi-threading to maximize the performance of our terrain generation.</li>\n</ul>\n<p><strong>Load Balancing:</strong></p>\n<ul>\n<li>As we are generating terrain for a game, it is important to load terrain quickly but also throttle operations as to not overload the user’s hardware and reduce FPS to an unplayable level.</li>\n</ul>\n<p><strong>Dynamic Loading:</strong></p>\n<ul>\n<li>Our world is a large, planet-like environment. As voxels are stored values representing our world, those values must be stored somewhere.</li>\n<li>We quickly approach the limitations of modern hardware if we store all of these values in our active memory.  </li>\n</ul>\n<p><strong>Determinism / Seeding:</strong></p>\n<ul>\n<li>We generate terrain with the use of randomization tools such as noise functions. With that, there is a decision between a uniquely generated new world, and a randomly generated world that is made consistent by the seed that it is given.</li>\n<li>Our target was the consistent world, as it allows us to leverage Unity’s editor to place objects into our world non-procedurally.</li>\n</ul>\n<p><strong>Spherical Terrain:</strong></p>\n<ul>\n<li>As our world is a spherical planet, we needed the ability generate terrain in a radial manner. This includes developing a spherical, mountainous surface with a cavernous core.</li>\n</ul>\n<h1 id=\"Implementation\"><a href=\"#Implementation\" class=\"headerlink\" title=\"Implementation\"></a>Implementation</h1><hr>\n<p>The following is a simplified overview of the pipeline:<br><img src=\"/images/TerrainManagerFlowChart.png\" alt=\"Terrain Manager Flow Chart\"></p>\n<h2 id=\"Chunks\"><a href=\"#Chunks\" class=\"headerlink\" title=\"Chunks\"></a>Chunks</h2><p>In the above examples, we have shown visual representations of our density values, but what is assigning them their mesh and position in the world?<br>We use a type we call <strong>Chunks</strong> to store this data and to pass it through our pipelines. In essence, a chunk is a single cube that contains a batch of voxels in the world.<br>Chunks contain the following information:  </p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Chunk coordinate representing its position among all chunks</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> position;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Density of each voxel</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> NativeArray&lt;<span class=\"keyword\">float</span>&gt; densities;</span><br><span class=\"line\"><span class=\"comment\">// Resource type of each voxel (iron, stone, etc)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> NativeArray&lt;Resource.Type&gt; resources;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Mesh data (updates on any voxel change)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> NativeList&lt;float3&gt; vertices;</span><br><span class=\"line\"><span class=\"keyword\">public</span> NativeList&lt;<span class=\"keyword\">int</span>&gt; triangles;</span><br><span class=\"line\"><span class=\"keyword\">public</span> NativeList&lt;float3&gt; normals;</span><br><span class=\"line\"><span class=\"keyword\">public</span> NativeList&lt;Color&gt; colors;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Level of detail of the chunk</span></span><br><span class=\"line\"><span class=\"comment\">// Best LOD being 1</span></span><br><span class=\"line\"><span class=\"comment\">// Must be powers of 2</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> lod;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// If the chunk has changed since it was loaded</span></span><br><span class=\"line\"><span class=\"comment\">// For checking if it should be saved on unload</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">bool</span> hasChanged; </span><br></pre></td></tr></table></figure>\n\n<p>The data buffers are Unity’s Native structures (C++ InterOp) to make use of the Burst Compiler.</p>\n<h2 id=\"Marching-Cubes-Algorithm\"><a href=\"#Marching-Cubes-Algorithm\" class=\"headerlink\" title=\"Marching Cubes Algorithm\"></a>Marching Cubes Algorithm</h2><h3 id=\"Triangulation\"><a href=\"#Triangulation\" class=\"headerlink\" title=\"Triangulation\"></a>Triangulation</h3><p>As mentioned above, the marching cube algorithm utilizes voxels to determine the density of a particular volume. This is interpreted as whether or not that point is part of the surface of our terrain. If we take the base case, a single voxel, we can look at its corner points to determine the triangle configuration of the cube that the voxel encompasses.</p>\n<p>These triangle configurations come in 15 variants:</p>\n<img src=\"/images/MarchingCubesConfigs.png\" width=\"60%\"/>\n\n<p>The orange points at the corners indicate that they are part of the ground, while the empty corners are air. If we extend this idea to a larger grid, these triangles will connect with one another to form the basis of the terrain depending on the configuration of these values.  </p>\n<p><img src=\"/images/MarchingExample.png\" alt=\"Marching Example\"></p>\n<p>The above image was constructed by setting all the voxels’ density values within a spherical radius of the center of the sphere to +1 (ground / filled state), and outside of the radius to -1 (air / empty state). The algorithm considers the transition between the ground (positive values) and the air (negative values) to be where the surface manifests, which is why our surface is a radial shape from the center of the sphere.</p>\n<h3 id=\"Smoothing\"><a href=\"#Smoothing\" class=\"headerlink\" title=\"Smoothing\"></a>Smoothing</h3><p>Now we have a solid terrain to work with, but something is missing. What about the smooth terrain shown in the video at the top of this page, the sort of terrain you might see in Astroneer? The example above is when you treat your values as a boolean, either representing a value below the surface or above it. However, if we use these values to represent a gradient of density from one voxel to the next, we can utilize interpolation to alter the angle of the triangles we are constructing.</p>\n<p><img src=\"/images/MarchingExampleSmooth.png\" alt=\"Marching Example Smooth\"></p>\n<p>One method of doing so is by setting the density values to a gradient ranging from +1 to -1, where +1 is the center of the sphere, 0 is the surface, and -1 is the boundary of our voxel grid. In this case, the boundary would be <code>2 * radius</code> or the <code>diameter</code> of the “world sphere”.</p>\n<p><img src=\"/images/MarchingCubesDensityGradient.png\" alt=\"Marching Cubes Density Gradient\"></p>\n<p>Another method of achieving this effect is through a similar technique. Instead of treating the whole “world sphere” as a gradient, only treat the region around the surface as a gradient. This becomes especially useful when applied in a game setting since most nodes are either <code>1</code> or <code>-1</code> and not a floating point value.</p>\n<p><img src=\"/images/MarchingCubesDensityGradientEnhanced.png\" alt=\"Marching Cubes Density Gradient\"></p>\n<p>This diagram shows how a surface is interpolated between two vertices with varying density values.</p>\n<img src=\"/images/MarchingCubesInterpolation.png\" width=\"60%\"/>\n<!--- Source link for the image above --->\n<a href=\"http://jamie-wong.com/2014/08/19/metaballs-and-marching-squares/\">\n  <p style=\"text-align:center\">\n  Image Source\n  </p>\n</a>\n\n<p>This, following the interpolation code, will achieve the smoothing explained above:</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">float3 <span class=\"title\">InterpolateVerts</span>(<span class=\"params\">float3 vertex1, float3 vertex2, <span class=\"keyword\">float</span> densityValue1, <span class=\"keyword\">float</span> densityValue2</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// Interpolate from first vertex to second vertex relative to density difference</span></span><br><span class=\"line\">    <span class=\"keyword\">float</span> t = (-densityValue1) / (densityValue2 - densityValue1);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> vertex1 + t * (vertex2 - vertex1);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Chunk-Generation\"><a href=\"#Chunk-Generation\" class=\"headerlink\" title=\"Chunk Generation\"></a>Chunk Generation</h2><p><img src=\"/images/TerrainManagerFlowChartRequestChunk.png\" alt=\"Terrain Manager Flow Chart\"></p>\n<p>Now that we have our data container, and a method to act on that data, we need to fill it with the data it requires to function. Upon being requested, the chunk’s density values are generated and the chunk goes through a two-step process of executing the marching cubes algorithm and mesh construction.</p>\n<p>First, we use the marching cubes algorithm to identify the vertices, triangles, normals of each voxel during which we pick vertex colors. Then, we construct the mesh and bake the physics from the resulting data.</p>\n<h3 id=\"Stitching-and-Sharing-Chunk-Edge-Data\"><a href=\"#Stitching-and-Sharing-Chunk-Edge-Data\" class=\"headerlink\" title=\"Stitching and Sharing Chunk Edge Data\"></a>Stitching and Sharing Chunk Edge Data</h3><!--\n**TODO**\n- voxels occupy the regions between nodes\n- thus voxels share edges\n- In a multithreaded environment, it is important to package chunks as self-contained as to prevent read & write race conditions\n- Pros vs cons of unique edges vs duplicated data (i.e. memory vs multi-threading benefits)\n- Tearing due to sharing of chunk data (in some cases such as bad unity collision checks)\n-->\n\n<p>An example of where one would need to be careful with duplication of data is <strong>deformation</strong>. Say if you were on the corner of several chunks sharing an edge, and you altered the density values of each of those chunks at different rates, that would break the idea that the values were duplicated. What results visually is a tearing effect, a gap in between the chunks. This requires additional attention to the synchronicity of the logic operating on the voxel data. </p>\n<p><img src=\"/images/VoxelTearing.png\" alt=\"Voxel Tearing\"></p>\n<ul>\n<li>Requirement of having to edit chunk edges only when all neighboring chunks are loaded</li>\n</ul>\n<!--\n### Chunk Terrain Generation\n***TODO***\n-->\n\n<h3 id=\"Chunk-Loading\"><a href=\"#Chunk-Loading\" class=\"headerlink\" title=\"Chunk Loading\"></a>Chunk Loading</h3><p><img src=\"/images/TerrainManagerFlowChartChunkLoader.png\" alt=\"Chunk Loader Flow Chart\"></p>\n<p>Now that we can generate chunks that also look like interesting terrain, we need a way to selectively pick which chunks to load as to not overwhelm a user’s computer with generating an entire world and expecting it all to fit in their RAM. We call this chunk loading. Similarly, this is also applied to unloading chunks.</p>\n<p>We do this by loading a <code>2n</code> by <code>2n</code> by <code>2n</code> cube around the player. You can take <code>n</code> number of chunks in each axis (<code>[x+n, x-n]</code>, <code>[y+n, y-n]</code>, and <code>[z+n, z-n]</code>) outward from the player and request them to be loaded.<br>Similarly if a loaded chunk falls outside of this cube, unload it.</p>\n<p><img src=\"/images/ChunkLoadingDistances.png\" alt=\"Chunk Loading Distances\"></p>\n<p>When loading and unloading chunks, it was important to remember that chunks share edge data so borders of chunks cannot be edited without neighboring chunks being loaded first to preserve this “synced” state.</p>\n<h3 id=\"Chunk-Serialization\"><a href=\"#Chunk-Serialization\" class=\"headerlink\" title=\"Chunk Serialization\"></a>Chunk Serialization</h3><p><img src=\"/images/TerrainManagerFlowChartTerrainSerializer.png\" alt=\"Terrain Manager Flow Chart Terrain Serializer\"></p>\n<p>For our implementation, we used a simple approach for storing chunks to a file. Given a known size of a chunk (n by n by n nodes), we can read and write entire 3D arrays of data as their binary representation. This is done for both the density and resource values.  </p>\n<p>It should be noted that, as a trivial form of optimization, only chunks changed by the player are saved to the disk. Since our terrain generation is deterministic and faster than loading chunks, it is faster to re-generate the chunk on request compared to loading that chunk from the disk. This, in return, also saves on disk space.</p>\n<p>These load and unload requests are performed within Unity Jobs to further utilize the player’s CPU cores from a multithreaded approach and to keep consistency with the rest of the systems.</p>\n<h3 id=\"Performance\"><a href=\"#Performance\" class=\"headerlink\" title=\"Performance\"></a>Performance</h3><p>Due to real-time gameplay restrictions and the amount of terrain a player is required to load, chunk generation/loading/marching needs to be highly optimized.</p>\n<p>As this is one of the most performance-critical portions of this system, we use Unity’s Job system to multi-thread the execution of this code. Originally, we had experimented with compute shader pipelines, which is faster in normal circumstances. However, after performance testing, Unity’s Burst Compiler in conjunction with the job system has outpaced these compute pipelines due to the overhead of large data buffer I/O with the GPU. The overhead of I/O was larger than the time for operations to be performed on that buffer, ultimately resulting in CPU-based computation being faster.</p>\n<p><strong>Major sources of optimization:</strong></p>\n<ul>\n<li>Chunk Stages</li>\n<li>Cross-Frame Work</li>\n<li>Maximizing Usage &amp; Throttling</li>\n<li>Priority Queueing</li>\n<li>Level Of Detail (LOD)</li>\n</ul>\n<p>The following is frame-by-frame profiling of the chunk processing system using multiple distinct job stages and cross-frame job completion of the chunk request pipeline (after optimization):<br><img src=\"/images/TerrainManagerJobSystem.png\" alt=\"Terrain Manager Flow Chart\"></p>\n<h4 id=\"Chunk-Stages\"><a href=\"#Chunk-Stages\" class=\"headerlink\" title=\"Chunk Stages\"></a>Chunk Stages</h4><p>Key Terms:</p>\n<ul>\n<li><strong>Frame</strong>: One game processing frame / update loop.</li>\n<li><strong>Work State</strong>: One of three stages a chunk will go through to be processed fully.</li>\n<li><strong>Work State Loop</strong>: One loop of all three work state steps.</li>\n</ul>\n<p>Our system uses three work states for processing chunks. These work states only allow a certain type, and by extension a certain amount, of work to be done on chunks for any given grouping of frames.<br>This technique greatly reduces lag spikes a user will experience from loading chunks.</p>\n<p>If a work state is completed early, the system will move on to the next work state without waiting for the full-frame count.</p>\n<p>For any given frame, only process one of three work states:</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Do the required work for this frame</span></span><br><span class=\"line\">ProcessChunks();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// If the current &quot;work state&quot; is still being processed, do not move to the next work state</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (!ProcessingChunks())</span><br><span class=\"line\">&#123; </span><br><span class=\"line\">  <span class=\"comment\">// Move on to the next &quot;work state&quot; for next frame</span></span><br><span class=\"line\">  _workState = _workState <span class=\"keyword\">switch</span> &#123;</span><br><span class=\"line\">    WORK_STATE.FILL =&gt; WORK_STATE.MARCH, <span class=\"comment\">// Generate/Load/Populate chunk with data</span></span><br><span class=\"line\">    WORK_STATE.MARCH =&gt; WORK_STATE.MESH, <span class=\"comment\">// Cube march the chunk</span></span><br><span class=\"line\">    WORK_STATE.MESH =&gt; WORK_STATE.FILL,  <span class=\"comment\">// Generate the chunk&#x27;s mesh</span></span><br><span class=\"line\">    _ =&gt; _workState</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>It should be noted that, despite this optimization being applied, the nature of this game requires some chunks to be processed immediately. For example, if a player deforms/destroys part of the terrain, the changed chunks must be processed immediately as to not produce visual lag to the user. These chunks are “fast-forwarded” through this system and are processed within one frame.</p>\n<h4 id=\"Cross-Frame-Work\"><a href=\"#Cross-Frame-Work\" class=\"headerlink\" title=\"Cross-Frame Work\"></a>Cross-Frame Work</h4><p>Key Terms:</p>\n<ul>\n<li><strong>Processing Spike</strong>: A period of higher stress on the CPU, often causing visual lag/“jumps” to the user.</li>\n</ul>\n<p>In general, each work stage will take a maximum of three frames. This technique gives jobs the ability to span across multiple frames, if needed, causing processing spikes on the CPU to “average out”.  </p>\n<h4 id=\"Maximizing-Usage-amp-Throttling\"><a href=\"#Maximizing-Usage-amp-Throttling\" class=\"headerlink\" title=\"Maximizing Usage &amp; Throttling\"></a>Maximizing Usage &amp; Throttling</h4><p>Key Terms:</p>\n<ul>\n<li><strong>Job’s Average Processing Requirements</strong>: The amount of work/time a given job takes/requires when being processed by the CPU. Generally, this is a rough estimate.</li>\n</ul>\n<p>As with the previously mentioned techniques, it is important to maximize usage of the CPU while also not overloading it. Given a set of chunks to be processed, instead of computing all of them in one go, breaking up that set into batches based on CPU speed / CPU core count / a job’s average processing requirements is a good way to determine how many chunks to process in one complete work state loop.</p>\n<p>This optimization technique is most effective when the user loads <em>many</em> chunks at once, such as when they first load the world.</p>\n<h4 id=\"Priority-Queueing\"><a href=\"#Priority-Queueing\" class=\"headerlink\" title=\"Priority Queueing\"></a>Priority Queueing</h4><p>Key Terms:</p>\n<ul>\n<li><strong>High Priority Chunk Request</strong>: A chunk that needs to be processed by the end of the <em>current</em> frame.</li>\n<li><strong>Low Priority Chunk Request</strong>: A chunk that needs to be processed as fast as possible, with minimal lag.</li>\n</ul>\n<p>Deciding which chunks should be processed first was briefly mentioned above with fast-forwarding, but it is, in reality, more complicated.</p>\n<p>Once a chunk is requested (either high or low priority), the system then sorts it into a queue based on current queued chunk priorities and will update priorities each frame, as needed.</p>\n<p>The following is a general set of rules we followed when implementing chunk processing priority queueing:</p>\n<ul>\n<li>High priority chunks:<ul>\n<li>No need to sort these requested chunks as they are <em>all</em> processing that frame.</li>\n<li>Always pulled from the queue by the system <em>before</em> low priority chunks</li>\n</ul>\n</li>\n<li>Low priority chunks:<ul>\n<li>Sorted by a weight which is usually the squared distance to the player as these chunks usually come from chunk loading</li>\n<li>Pulled from the queue by the system when there are not enough high priority chunks to process</li>\n</ul>\n</li>\n</ul>\n<p>The following code reflects these set of rules:</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Grab high priority chunks (processed this frame)</span></span><br><span class=\"line\"><span class=\"keyword\">while</span> (_chunksToRegenerate.HighPriorityCount &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">  <span class=\"comment\">// Grab any high priority chunk</span></span><br><span class=\"line\">  _chunksToRegeneratePriorityBatch.Add(_chunksToRegenerate.Pop());</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// If at the start of a new work state loop</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (_workState == WORK_STATE.FILL)</span><br><span class=\"line\">  <span class=\"comment\">// While there is still space to fill for the max job count - high priority chunk count</span></span><br><span class=\"line\">  <span class=\"keyword\">while</span> (_chunksToRegenerateBatch.Count &lt; _maxJobCount &amp;&amp; _chunksToRegenerate.LowPriorityCount &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">    <span class=\"comment\">// Pop the next item from the priority queue, sorted by distance to player</span></span><br><span class=\"line\">    _chunksToRegenerateBatch.Add(_chunksToRegenerate.Pop());</span><br></pre></td></tr></table></figure>\n\n<p>A rough example of 2D priority queueing, a cross-section of the 3D chunk loaded cube, is demonstrated as an interactive demo below. Move your cursor around to see which chunks have priority to be loaded relative to your cursor.</p>\n<p><strong>Note:</strong> This demo’s source code does not reflect the project’s implementation. It is purely for a visual understanding of the chunk loading concept.</p>\n<p align=\"center\">\n<iframe class=\"child\" src=\"https://www.openprocessing.org/sketch/1052217/embed/\"></iframe>\n</p>\n\n<p>The maximum number of chunks a three-stage loop can process is given by the following:<br><code>Max(Number Of High Priority Chunk Count, Number Of Reasonable Chunks Per Stage Loop)</code><br>That is to say that high priority chunks are always processed with low priority chunks filling in any free slots.</p>\n<p>Using a priority queue and updating weights as needed, you get responsive chunk loading that can adapt quickly to, for example, changes in player position:</p>\n<p align=\"center\">\n<video playsinline autoplay loop muted controls class=\"desktop-70-mobile-100\">\n  <source src=\"/images/TerrainChunkPriorityLoading.webm\" type=\"video/webm\">\n  Your browser does not support the video tag.\n</video>\n</p>\n\n<p>Once applying a similar technique to chunk unloading, you get fluid and responsive terrain.</p>\n<p align=\"center\">\n<video playsinline autoplay loop muted controls class=\"desktop-70-mobile-100\">\n  <source src=\"/images/TerrainChunkPriorityLoadingUnloading.webm\" type=\"video/webm\">\n  Your browser does not support the video tag.\n</video>\n</p>\n\n<h4 id=\"Level-Of-Detail-LOD\"><a href=\"#Level-Of-Detail-LOD\" class=\"headerlink\" title=\"Level Of Detail (LOD)\"></a>Level Of Detail (LOD)</h4><p>Key Terms:</p>\n<ul>\n<li><strong>Level of Detail</strong>: Also known as LOD, it is the amount (level) of data (detail) you are choosing to display to the user. This is often used on far-away objects since it is the same to the user visually but faster to compute.</li>\n</ul>\n<p>Given our grid-based voxel terrain, LOD was trivial to implement on a basic level. Since our chunks are 16x16x16, LOD can be a power of two to reduce the amount of data that needs to be computed/rendered out of this chunk.</p>\n<p>As a simple example, take the following 2D grid of 16 voxels, 17 nodes:</p>\n<p><strong>Key:</strong></p>\n<ul>\n<li><strong>Purple Circles</strong>: Density data nodes.</li>\n<li><strong>Black Squares</strong>: Voxels generated from corner nodes.</li>\n</ul>\n<table width=\"100%\">\n  <tr>\n    <th>LOD of 1:</th>\n    <th>LOD of 2:</th>\n    <th>LOD of 4:</th>\n  </tr>\n  <tr>\n    <td><img src=\"/images/CubeMarchingLOD1.png\" alt=\"Cube Marching LOD 1\" width=\"100%\"/></td>\n    <td><img src=\"/images/CubeMarchingLOD2.png\" alt=\"Cube Marching LOD 2\" width=\"100%\"/></td>\n    <td><img src=\"/images/CubeMarchingLOD4.png\" alt=\"Cube Marching LOD 4\" width=\"100%\"/></td>\n  </tr>\n</table>\n\n<p>As can be seen, voxels sample from fewer nodes, but are scaled to take up the same amount of space.</p>\n<p>The LOD gradients shown below demonstrate this logic applied to the terrain.</p>\n<table width=\"100%\">\n  <tr>\n    <th>Smooth Sphere LOD Gradient:</th>\n    <th>Noisy Sphere LOD Gradient</th>\n  </tr>\n  <tr>\n    <td><img src=\"/images/LODSmoothSphere.png\" alt=\"Smooth Sphere LOD Gradient:\" width=\"500px\"/></td>\n    <td><img src=\"/images/LODNoisySphere.png\" alt=\"Noisy Sphere LOD Gradient\" width=\"500px\"/></td>\n  </tr>\n</table>\n\n<p>Despite promising results, you would need to apply an algorithm similar to <a href=\"https://transvoxel.org/\">TransVoxel</a> to implement a more sophisticated solution that doesn’t generate holes between differing LOD levels. As of currently, we do not implement this algorithm.</p>\n<!--\nTODO:\n- Resource collection\n-->\n\n<h2 id=\"Terrain-Features\"><a href=\"#Terrain-Features\" class=\"headerlink\" title=\"Terrain Features\"></a>Terrain Features</h2><h3 id=\"Terrain-Voxel-Manipulation\"><a href=\"#Terrain-Voxel-Manipulation\" class=\"headerlink\" title=\"Terrain / Voxel Manipulation\"></a>Terrain / Voxel Manipulation</h3><p>When we manipulate our voxel terrain, we alter the density values in an area of influence.<br>In our game, we use a spherical brush to accomplish this, resulting in spherical cutouts of the terrain at the target area.</p>\n<p align=\"center\">\n<video playsinline autoplay loop muted controls class=\"desktop-70-mobile-100\">\n  <source src=\"/images/VoxelManipulation.webm\" type=\"video/webm\">\n  Your browser does not support the video tag.\n</video>\n</p>\n\n<p>In the example above, you can see both additive and subtractive operations. Thankfully, these translate straightforwardly to adding and subtracting from the density values in our target area.</p>\n<p>Below is an interactive demo of the logic functioning in a 2D variant. Mouse over the area to subtract or add from a given area, altering the terrain. These values are either 1 or -1, representing a filled or unfilled area, respectively. As there is no gradient, this will result in unsmooth terrain.</p>\n<p>Click the left mouse button to toggle addition/subtraction.</p>\n<p align=\"center\"><iframe class=\"child\" src=\"https://www.openprocessing.org/sketch/1051758/embed/\" width=\"500vh\" height=\"700vh\"></iframe></p>\n\n<h3 id=\"Editor-Mode\"><a href=\"#Editor-Mode\" class=\"headerlink\" title=\"Editor Mode\"></a>Editor Mode</h3><p>Procedural generation is typically executed at runtime. In other words, our voxel terrain would only be visible upon launching the game into Play Mode.<br>However, this is problematic in the case where we would like to edit our scene. How would determine where to place a sign sticking out of the ground, or a treasure chest?<br>We’d need a way to edit the scene with the world already constructed. Our solution is editor-time world loading.  </p>\n<p>By using proximity loading of our chunks as found at runtime, we may move the player around in the scene to load whichever portion is needed to us.</p>\n<p align=\"center\">\n<video playsinline autoplay loop muted controls class=\"desktop-70-mobile-100\">\n  <source src=\"/images/EditorMode.webm\" type=\"video/webm\">\n  Your browser does not support the video tag.\n</video>\n</p>\n\n<p>We track the current state of the Unity editor to determine when to dispose of the memory or create it anew.<br>Entering play mode or edit mode will reconstruct the necessary memory for the voxel terrain.</p>\n<!--\n# Final Notes\n***TODO***\n~~In conclusion, this project produced an impressive and responsive terrain that makes for great gameplay.~~\n~~In conclusion, the signal disruptor is an award-winning board~~\n\n## Further Implementations\n- Hot-loading\n- \n-->\n\n<!---\n# ---- OTHER: ----\n## Spherical\n\n# EXTRA\n## Process of Creating a Chunk\n\nOnce a chunk entity is created and its position is assigned, it will enter the system chain to be processed in the following order\n\n## Data Generation\n## Cube Marching\n### Solution Lookup\n### Smoothing\n## Mesh Generation\nThe process of mesh generation is split into three steps:\n1) **Create Chunk Mesh**: Create the mesh object, and copy the data to the new mesh\n1) **Bake Chunk Mesh**: Bake the mesh using Unity\\'s `Physics.BakeMesh`\n1) **Set Chunk Mesh**: Create a GameObject, and assign it the new mesh.\nThe reason mesh generation is split into three distinct steps is due to the inability of steps #1 & #3 to be parallelized with burst compilation, while step #2 can be.\n### Creating the Chunk\\'s Mesh\nThis step simply creates the mesh and copies the data from the `IBufferElementData` components to the new mesh.\n\nThis is done without burst and sequentially - due to Unity\\'s `Mesh` being non-blittable.\n### Baking the Chunk\\'s Mesh\n### Setting the Chunk\\'s Mesh\n## Live Editing With Unity Atoms\n## Post Mortem\n\n- Burst-Compiled Unity Jobs\n- Chunk Loading\n- Marching Cubes\n- Unity Atoms\n---\n**NOTE**\nThe cost of using components as flags is not insignificant! The trade-off is knowing what stage any given chunk is at for debugging.\n---\n## Post Mortem\n## Unity ECS\n### Setup\nTo utilize the speed of Unity\\'s provided ECS, chunks were entities that consist of data components and their associated GameObject to store + render the mesh. Along the way, they also get tagged/untagged with \"Flag\" components to tell the next system to operate on them.\nThe ECS chunk, after processing, would contain the following component data:\n![Chunk Components](/images/ChunkComponents.png)\n\n### Why It Didn't Work \nAfter all the work setting up systems, components, and way more, it seemed like the team was constantly fighting Unity ECS to make it fit our needs. System order was impossible to configure, command buffers wouldn't execute on the frames we needed, adding and removing components correctly was complex to manage, and what could run within a system was very restrictive.\n\nDespite this, these problems were not the deal-breaker. Even if all these problems were alleviated, we needed all these systems to process chunk entities within one frame. When the player deforms the terrain, the \"frame rate of deformation\" should run at the same rate as the rest of the game. This was not the case when the systems ran across multiple frames as the deformation would run at a perceived FPS of Frame-Rate / System-Frame-Count and would look choppy.\n\n### The Fix\nLuckily, systems are very similar to Unity's job system which allowed up to transfer over easily.\n-->\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Background\"><a href=\"#Background\" class=\"headerlink\" title=\"Background\"></a>Background</h1><hr>\n<style>\n.child{\n    width:  60%;\n}\n\n@media screen and (max-width: 600px) {\n  .child{\n      width:  100%;\n  }\n}\n\n.desktop-70-mobile-100{\n    width:  70%;\n}\n\n@media screen and (max-width: 600px) {\n  .desktop-70-mobile-100{\n      width:  100%;\n  }\n}\n\n.desktop-50-mobile-100{\n    width:  50%;\n}\n\n@media screen and (max-width: 600px) {\n  .desktop-50-mobile-100{\n      width:  100%;\n  }\n}\n</style>\n\n<script>\n$( document ).ready(function() {\n  var cw = $('.child').width();\n  $('.child').css({\n      'height': cw + 'px'\n  });\n});\n</script>\n\n<h2 id=\"About-the-Authors\"><a href=\"#About-the-Authors\" class=\"headerlink\" title=\"About the Authors\"></a>About the Authors</h2><p>Calin Gavriliuc: Engine Programmer<br>Jonathan Bourim: Graphics Engineer &amp; Engine Programmer</p>\n<p>We are Computer Science students at the DigiPen Institute of Technology, and have been working on game projects together for several years.</p>\n<p><a href=\"https://store.steampowered.com/search/?developer=Handshake%20Firm\">Here</a> are some game we have worked on:<br><img src=\"/images/ArcApellago.jpg\" alt=\"ArcApellago\"><br><img src=\"/images/DeltaBlade2700.jpg\" alt=\"DeltaBlade2700\"></p>\n<h2 id=\"Introduction\"><a href=\"#Introduction\" class=\"headerlink\" title=\"Introduction\"></a>Introduction</h2><p>Project Cleanser is a year-long team game project that we’ve been working on together. It’s a sandbox game set on a large planet, where the player hunts, digs, and upgrades their equipment to challenge the core at the center of the world.</p>\n<p>While we were brainstorming ideas for our new, year-long game project, we encountered many interesting videos showcasing voxel techniques, such as procedural world generation and deformation.</p>\n<p>Inspired by Astroneer, we decided to implement a similar method of terrain generation and deformation for our project.</p>\n<p><a href=\"https://www.youtube.com/watch?v=NG1gJvdCE4Q\">Some Inspiration</a></p>\n<h2 id=\"What-Is-It\"><a href=\"#What-Is-It\" class=\"headerlink\" title=\"What Is It\"></a>What Is It</h2><h3 id=\"Voxels\"><a href=\"#Voxels\" class=\"headerlink\" title=\"Voxels\"></a>Voxels</h3><p>Voxels are a volumetric representation of a point in 3D space. While pixels are representative of data in a small <strong>area</strong>, voxels are representative of data in a small <strong>volume</strong>. These values exist on a 3D grid, and have each point in that grid set to a particular value. With our goal being to make terrain, we used these values to determine the density of the terrain at that point.<br>Density for our volume means it exists in one of two states, <strong>filled</strong> (part of the ground), or <strong>empty</strong> (air).</p>\n<h3 id=\"Cube-Marched-Terrain-Generation\"><a href=\"#Cube-Marched-Terrain-Generation\" class=\"headerlink\" title=\"Cube Marched Terrain Generation\"></a>Cube Marched Terrain Generation</h3><p>The marching cubes algorithm is a fast way to generate a polygonal mesh from a height/density field. We use this algorithm to generate triangles for a mesh from a density field. It is a relatively simple, fast, and efficient algorithm that has been used in many applications.</p>\n<p>The end result can be seen in the following video.</p>\n<p align=\"center\">\n<video playsinline autoplay loop muted controls class=\"desktop-50-mobile-100\">\n  <source src=\"/images/CubeMarchingSculpting.webm\" type=\"video/webm\">\n  Your browser does not support the video tag.\n</video>\n</p>\n\n<h2 id=\"Goals-amp-Constraints\"><a href=\"#Goals-amp-Constraints\" class=\"headerlink\" title=\"Goals &amp; Constraints\"></a>Goals &amp; Constraints</h2><p>For our terrain to function in our environment, we constructed our systems with several priorities in mind:</p>\n<ul>\n<li>Multi-threading</li>\n<li>Load Balancing</li>\n<li>Dynamic Loading</li>\n<li>Determinism / Seeding</li>\n<li>Spherical Terrain</li>\n</ul>\n<p><strong>Multi-threading:</strong></p>\n<ul>\n<li>Due to the gargantuan number of math operations that occur when our terrain is generated or modified, performance is the primary concern of this implementation.</li>\n<li>We must leverage Unity’s Job system for multi-threading to maximize the performance of our terrain generation.</li>\n</ul>\n<p><strong>Load Balancing:</strong></p>\n<ul>\n<li>As we are generating terrain for a game, it is important to load terrain quickly but also throttle operations as to not overload the user’s hardware and reduce FPS to an unplayable level.</li>\n</ul>\n<p><strong>Dynamic Loading:</strong></p>\n<ul>\n<li>Our world is a large, planet-like environment. As voxels are stored values representing our world, those values must be stored somewhere.</li>\n<li>We quickly approach the limitations of modern hardware if we store all of these values in our active memory.  </li>\n</ul>\n<p><strong>Determinism / Seeding:</strong></p>\n<ul>\n<li>We generate terrain with the use of randomization tools such as noise functions. With that, there is a decision between a uniquely generated new world, and a randomly generated world that is made consistent by the seed that it is given.</li>\n<li>Our target was the consistent world, as it allows us to leverage Unity’s editor to place objects into our world non-procedurally.</li>\n</ul>\n<p><strong>Spherical Terrain:</strong></p>\n<ul>\n<li>As our world is a spherical planet, we needed the ability generate terrain in a radial manner. This includes developing a spherical, mountainous surface with a cavernous core.</li>\n</ul>\n<h1 id=\"Implementation\"><a href=\"#Implementation\" class=\"headerlink\" title=\"Implementation\"></a>Implementation</h1><hr>\n<p>The following is a simplified overview of the pipeline:<br><img src=\"/images/TerrainManagerFlowChart.png\" alt=\"Terrain Manager Flow Chart\"></p>\n<h2 id=\"Chunks\"><a href=\"#Chunks\" class=\"headerlink\" title=\"Chunks\"></a>Chunks</h2><p>In the above examples, we have shown visual representations of our density values, but what is assigning them their mesh and position in the world?<br>We use a type we call <strong>Chunks</strong> to store this data and to pass it through our pipelines. In essence, a chunk is a single cube that contains a batch of voxels in the world.<br>Chunks contain the following information:  </p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Chunk coordinate representing its position among all chunks</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> position;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Density of each voxel</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> NativeArray&lt;<span class=\"keyword\">float</span>&gt; densities;</span><br><span class=\"line\"><span class=\"comment\">// Resource type of each voxel (iron, stone, etc)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> NativeArray&lt;Resource.Type&gt; resources;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Mesh data (updates on any voxel change)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> NativeList&lt;float3&gt; vertices;</span><br><span class=\"line\"><span class=\"keyword\">public</span> NativeList&lt;<span class=\"keyword\">int</span>&gt; triangles;</span><br><span class=\"line\"><span class=\"keyword\">public</span> NativeList&lt;float3&gt; normals;</span><br><span class=\"line\"><span class=\"keyword\">public</span> NativeList&lt;Color&gt; colors;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Level of detail of the chunk</span></span><br><span class=\"line\"><span class=\"comment\">// Best LOD being 1</span></span><br><span class=\"line\"><span class=\"comment\">// Must be powers of 2</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> lod;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// If the chunk has changed since it was loaded</span></span><br><span class=\"line\"><span class=\"comment\">// For checking if it should be saved on unload</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">bool</span> hasChanged; </span><br></pre></td></tr></table></figure>\n\n<p>The data buffers are Unity’s Native structures (C++ InterOp) to make use of the Burst Compiler.</p>\n<h2 id=\"Marching-Cubes-Algorithm\"><a href=\"#Marching-Cubes-Algorithm\" class=\"headerlink\" title=\"Marching Cubes Algorithm\"></a>Marching Cubes Algorithm</h2><h3 id=\"Triangulation\"><a href=\"#Triangulation\" class=\"headerlink\" title=\"Triangulation\"></a>Triangulation</h3><p>As mentioned above, the marching cube algorithm utilizes voxels to determine the density of a particular volume. This is interpreted as whether or not that point is part of the surface of our terrain. If we take the base case, a single voxel, we can look at its corner points to determine the triangle configuration of the cube that the voxel encompasses.</p>\n<p>These triangle configurations come in 15 variants:</p>\n<img src=\"/images/MarchingCubesConfigs.png\" width=\"60%\"/>\n\n<p>The orange points at the corners indicate that they are part of the ground, while the empty corners are air. If we extend this idea to a larger grid, these triangles will connect with one another to form the basis of the terrain depending on the configuration of these values.  </p>\n<p><img src=\"/images/MarchingExample.png\" alt=\"Marching Example\"></p>\n<p>The above image was constructed by setting all the voxels’ density values within a spherical radius of the center of the sphere to +1 (ground / filled state), and outside of the radius to -1 (air / empty state). The algorithm considers the transition between the ground (positive values) and the air (negative values) to be where the surface manifests, which is why our surface is a radial shape from the center of the sphere.</p>\n<h3 id=\"Smoothing\"><a href=\"#Smoothing\" class=\"headerlink\" title=\"Smoothing\"></a>Smoothing</h3><p>Now we have a solid terrain to work with, but something is missing. What about the smooth terrain shown in the video at the top of this page, the sort of terrain you might see in Astroneer? The example above is when you treat your values as a boolean, either representing a value below the surface or above it. However, if we use these values to represent a gradient of density from one voxel to the next, we can utilize interpolation to alter the angle of the triangles we are constructing.</p>\n<p><img src=\"/images/MarchingExampleSmooth.png\" alt=\"Marching Example Smooth\"></p>\n<p>One method of doing so is by setting the density values to a gradient ranging from +1 to -1, where +1 is the center of the sphere, 0 is the surface, and -1 is the boundary of our voxel grid. In this case, the boundary would be <code>2 * radius</code> or the <code>diameter</code> of the “world sphere”.</p>\n<p><img src=\"/images/MarchingCubesDensityGradient.png\" alt=\"Marching Cubes Density Gradient\"></p>\n<p>Another method of achieving this effect is through a similar technique. Instead of treating the whole “world sphere” as a gradient, only treat the region around the surface as a gradient. This becomes especially useful when applied in a game setting since most nodes are either <code>1</code> or <code>-1</code> and not a floating point value.</p>\n<p><img src=\"/images/MarchingCubesDensityGradientEnhanced.png\" alt=\"Marching Cubes Density Gradient\"></p>\n<p>This diagram shows how a surface is interpolated between two vertices with varying density values.</p>\n<img src=\"/images/MarchingCubesInterpolation.png\" width=\"60%\"/>\n<!--- Source link for the image above --->\n<a href=\"http://jamie-wong.com/2014/08/19/metaballs-and-marching-squares/\">\n  <p style=\"text-align:center\">\n  Image Source\n  </p>\n</a>\n\n<p>This, following the interpolation code, will achieve the smoothing explained above:</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">float3 <span class=\"title\">InterpolateVerts</span>(<span class=\"params\">float3 vertex1, float3 vertex2, <span class=\"keyword\">float</span> densityValue1, <span class=\"keyword\">float</span> densityValue2</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// Interpolate from first vertex to second vertex relative to density difference</span></span><br><span class=\"line\">    <span class=\"keyword\">float</span> t = (-densityValue1) / (densityValue2 - densityValue1);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> vertex1 + t * (vertex2 - vertex1);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Chunk-Generation\"><a href=\"#Chunk-Generation\" class=\"headerlink\" title=\"Chunk Generation\"></a>Chunk Generation</h2><p><img src=\"/images/TerrainManagerFlowChartRequestChunk.png\" alt=\"Terrain Manager Flow Chart\"></p>\n<p>Now that we have our data container, and a method to act on that data, we need to fill it with the data it requires to function. Upon being requested, the chunk’s density values are generated and the chunk goes through a two-step process of executing the marching cubes algorithm and mesh construction.</p>\n<p>First, we use the marching cubes algorithm to identify the vertices, triangles, normals of each voxel during which we pick vertex colors. Then, we construct the mesh and bake the physics from the resulting data.</p>\n<h3 id=\"Stitching-and-Sharing-Chunk-Edge-Data\"><a href=\"#Stitching-and-Sharing-Chunk-Edge-Data\" class=\"headerlink\" title=\"Stitching and Sharing Chunk Edge Data\"></a>Stitching and Sharing Chunk Edge Data</h3><!--\n**TODO**\n- voxels occupy the regions between nodes\n- thus voxels share edges\n- In a multithreaded environment, it is important to package chunks as self-contained as to prevent read & write race conditions\n- Pros vs cons of unique edges vs duplicated data (i.e. memory vs multi-threading benefits)\n- Tearing due to sharing of chunk data (in some cases such as bad unity collision checks)\n-->\n\n<p>An example of where one would need to be careful with duplication of data is <strong>deformation</strong>. Say if you were on the corner of several chunks sharing an edge, and you altered the density values of each of those chunks at different rates, that would break the idea that the values were duplicated. What results visually is a tearing effect, a gap in between the chunks. This requires additional attention to the synchronicity of the logic operating on the voxel data. </p>\n<p><img src=\"/images/VoxelTearing.png\" alt=\"Voxel Tearing\"></p>\n<ul>\n<li>Requirement of having to edit chunk edges only when all neighboring chunks are loaded</li>\n</ul>\n<!--\n### Chunk Terrain Generation\n***TODO***\n-->\n\n<h3 id=\"Chunk-Loading\"><a href=\"#Chunk-Loading\" class=\"headerlink\" title=\"Chunk Loading\"></a>Chunk Loading</h3><p><img src=\"/images/TerrainManagerFlowChartChunkLoader.png\" alt=\"Chunk Loader Flow Chart\"></p>\n<p>Now that we can generate chunks that also look like interesting terrain, we need a way to selectively pick which chunks to load as to not overwhelm a user’s computer with generating an entire world and expecting it all to fit in their RAM. We call this chunk loading. Similarly, this is also applied to unloading chunks.</p>\n<p>We do this by loading a <code>2n</code> by <code>2n</code> by <code>2n</code> cube around the player. You can take <code>n</code> number of chunks in each axis (<code>[x+n, x-n]</code>, <code>[y+n, y-n]</code>, and <code>[z+n, z-n]</code>) outward from the player and request them to be loaded.<br>Similarly if a loaded chunk falls outside of this cube, unload it.</p>\n<p><img src=\"/images/ChunkLoadingDistances.png\" alt=\"Chunk Loading Distances\"></p>\n<p>When loading and unloading chunks, it was important to remember that chunks share edge data so borders of chunks cannot be edited without neighboring chunks being loaded first to preserve this “synced” state.</p>\n<h3 id=\"Chunk-Serialization\"><a href=\"#Chunk-Serialization\" class=\"headerlink\" title=\"Chunk Serialization\"></a>Chunk Serialization</h3><p><img src=\"/images/TerrainManagerFlowChartTerrainSerializer.png\" alt=\"Terrain Manager Flow Chart Terrain Serializer\"></p>\n<p>For our implementation, we used a simple approach for storing chunks to a file. Given a known size of a chunk (n by n by n nodes), we can read and write entire 3D arrays of data as their binary representation. This is done for both the density and resource values.  </p>\n<p>It should be noted that, as a trivial form of optimization, only chunks changed by the player are saved to the disk. Since our terrain generation is deterministic and faster than loading chunks, it is faster to re-generate the chunk on request compared to loading that chunk from the disk. This, in return, also saves on disk space.</p>\n<p>These load and unload requests are performed within Unity Jobs to further utilize the player’s CPU cores from a multithreaded approach and to keep consistency with the rest of the systems.</p>\n<h3 id=\"Performance\"><a href=\"#Performance\" class=\"headerlink\" title=\"Performance\"></a>Performance</h3><p>Due to real-time gameplay restrictions and the amount of terrain a player is required to load, chunk generation/loading/marching needs to be highly optimized.</p>\n<p>As this is one of the most performance-critical portions of this system, we use Unity’s Job system to multi-thread the execution of this code. Originally, we had experimented with compute shader pipelines, which is faster in normal circumstances. However, after performance testing, Unity’s Burst Compiler in conjunction with the job system has outpaced these compute pipelines due to the overhead of large data buffer I/O with the GPU. The overhead of I/O was larger than the time for operations to be performed on that buffer, ultimately resulting in CPU-based computation being faster.</p>\n<p><strong>Major sources of optimization:</strong></p>\n<ul>\n<li>Chunk Stages</li>\n<li>Cross-Frame Work</li>\n<li>Maximizing Usage &amp; Throttling</li>\n<li>Priority Queueing</li>\n<li>Level Of Detail (LOD)</li>\n</ul>\n<p>The following is frame-by-frame profiling of the chunk processing system using multiple distinct job stages and cross-frame job completion of the chunk request pipeline (after optimization):<br><img src=\"/images/TerrainManagerJobSystem.png\" alt=\"Terrain Manager Flow Chart\"></p>\n<h4 id=\"Chunk-Stages\"><a href=\"#Chunk-Stages\" class=\"headerlink\" title=\"Chunk Stages\"></a>Chunk Stages</h4><p>Key Terms:</p>\n<ul>\n<li><strong>Frame</strong>: One game processing frame / update loop.</li>\n<li><strong>Work State</strong>: One of three stages a chunk will go through to be processed fully.</li>\n<li><strong>Work State Loop</strong>: One loop of all three work state steps.</li>\n</ul>\n<p>Our system uses three work states for processing chunks. These work states only allow a certain type, and by extension a certain amount, of work to be done on chunks for any given grouping of frames.<br>This technique greatly reduces lag spikes a user will experience from loading chunks.</p>\n<p>If a work state is completed early, the system will move on to the next work state without waiting for the full-frame count.</p>\n<p>For any given frame, only process one of three work states:</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Do the required work for this frame</span></span><br><span class=\"line\">ProcessChunks();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// If the current &quot;work state&quot; is still being processed, do not move to the next work state</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (!ProcessingChunks())</span><br><span class=\"line\">&#123; </span><br><span class=\"line\">  <span class=\"comment\">// Move on to the next &quot;work state&quot; for next frame</span></span><br><span class=\"line\">  _workState = _workState <span class=\"keyword\">switch</span> &#123;</span><br><span class=\"line\">    WORK_STATE.FILL =&gt; WORK_STATE.MARCH, <span class=\"comment\">// Generate/Load/Populate chunk with data</span></span><br><span class=\"line\">    WORK_STATE.MARCH =&gt; WORK_STATE.MESH, <span class=\"comment\">// Cube march the chunk</span></span><br><span class=\"line\">    WORK_STATE.MESH =&gt; WORK_STATE.FILL,  <span class=\"comment\">// Generate the chunk&#x27;s mesh</span></span><br><span class=\"line\">    _ =&gt; _workState</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>It should be noted that, despite this optimization being applied, the nature of this game requires some chunks to be processed immediately. For example, if a player deforms/destroys part of the terrain, the changed chunks must be processed immediately as to not produce visual lag to the user. These chunks are “fast-forwarded” through this system and are processed within one frame.</p>\n<h4 id=\"Cross-Frame-Work\"><a href=\"#Cross-Frame-Work\" class=\"headerlink\" title=\"Cross-Frame Work\"></a>Cross-Frame Work</h4><p>Key Terms:</p>\n<ul>\n<li><strong>Processing Spike</strong>: A period of higher stress on the CPU, often causing visual lag/“jumps” to the user.</li>\n</ul>\n<p>In general, each work stage will take a maximum of three frames. This technique gives jobs the ability to span across multiple frames, if needed, causing processing spikes on the CPU to “average out”.  </p>\n<h4 id=\"Maximizing-Usage-amp-Throttling\"><a href=\"#Maximizing-Usage-amp-Throttling\" class=\"headerlink\" title=\"Maximizing Usage &amp; Throttling\"></a>Maximizing Usage &amp; Throttling</h4><p>Key Terms:</p>\n<ul>\n<li><strong>Job’s Average Processing Requirements</strong>: The amount of work/time a given job takes/requires when being processed by the CPU. Generally, this is a rough estimate.</li>\n</ul>\n<p>As with the previously mentioned techniques, it is important to maximize usage of the CPU while also not overloading it. Given a set of chunks to be processed, instead of computing all of them in one go, breaking up that set into batches based on CPU speed / CPU core count / a job’s average processing requirements is a good way to determine how many chunks to process in one complete work state loop.</p>\n<p>This optimization technique is most effective when the user loads <em>many</em> chunks at once, such as when they first load the world.</p>\n<h4 id=\"Priority-Queueing\"><a href=\"#Priority-Queueing\" class=\"headerlink\" title=\"Priority Queueing\"></a>Priority Queueing</h4><p>Key Terms:</p>\n<ul>\n<li><strong>High Priority Chunk Request</strong>: A chunk that needs to be processed by the end of the <em>current</em> frame.</li>\n<li><strong>Low Priority Chunk Request</strong>: A chunk that needs to be processed as fast as possible, with minimal lag.</li>\n</ul>\n<p>Deciding which chunks should be processed first was briefly mentioned above with fast-forwarding, but it is, in reality, more complicated.</p>\n<p>Once a chunk is requested (either high or low priority), the system then sorts it into a queue based on current queued chunk priorities and will update priorities each frame, as needed.</p>\n<p>The following is a general set of rules we followed when implementing chunk processing priority queueing:</p>\n<ul>\n<li>High priority chunks:<ul>\n<li>No need to sort these requested chunks as they are <em>all</em> processing that frame.</li>\n<li>Always pulled from the queue by the system <em>before</em> low priority chunks</li>\n</ul>\n</li>\n<li>Low priority chunks:<ul>\n<li>Sorted by a weight which is usually the squared distance to the player as these chunks usually come from chunk loading</li>\n<li>Pulled from the queue by the system when there are not enough high priority chunks to process</li>\n</ul>\n</li>\n</ul>\n<p>The following code reflects these set of rules:</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Grab high priority chunks (processed this frame)</span></span><br><span class=\"line\"><span class=\"keyword\">while</span> (_chunksToRegenerate.HighPriorityCount &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">  <span class=\"comment\">// Grab any high priority chunk</span></span><br><span class=\"line\">  _chunksToRegeneratePriorityBatch.Add(_chunksToRegenerate.Pop());</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// If at the start of a new work state loop</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (_workState == WORK_STATE.FILL)</span><br><span class=\"line\">  <span class=\"comment\">// While there is still space to fill for the max job count - high priority chunk count</span></span><br><span class=\"line\">  <span class=\"keyword\">while</span> (_chunksToRegenerateBatch.Count &lt; _maxJobCount &amp;&amp; _chunksToRegenerate.LowPriorityCount &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">    <span class=\"comment\">// Pop the next item from the priority queue, sorted by distance to player</span></span><br><span class=\"line\">    _chunksToRegenerateBatch.Add(_chunksToRegenerate.Pop());</span><br></pre></td></tr></table></figure>\n\n<p>A rough example of 2D priority queueing, a cross-section of the 3D chunk loaded cube, is demonstrated as an interactive demo below. Move your cursor around to see which chunks have priority to be loaded relative to your cursor.</p>\n<p><strong>Note:</strong> This demo’s source code does not reflect the project’s implementation. It is purely for a visual understanding of the chunk loading concept.</p>\n<p align=\"center\">\n<iframe class=\"child\" src=\"https://www.openprocessing.org/sketch/1052217/embed/\"></iframe>\n</p>\n\n<p>The maximum number of chunks a three-stage loop can process is given by the following:<br><code>Max(Number Of High Priority Chunk Count, Number Of Reasonable Chunks Per Stage Loop)</code><br>That is to say that high priority chunks are always processed with low priority chunks filling in any free slots.</p>\n<p>Using a priority queue and updating weights as needed, you get responsive chunk loading that can adapt quickly to, for example, changes in player position:</p>\n<p align=\"center\">\n<video playsinline autoplay loop muted controls class=\"desktop-70-mobile-100\">\n  <source src=\"/images/TerrainChunkPriorityLoading.webm\" type=\"video/webm\">\n  Your browser does not support the video tag.\n</video>\n</p>\n\n<p>Once applying a similar technique to chunk unloading, you get fluid and responsive terrain.</p>\n<p align=\"center\">\n<video playsinline autoplay loop muted controls class=\"desktop-70-mobile-100\">\n  <source src=\"/images/TerrainChunkPriorityLoadingUnloading.webm\" type=\"video/webm\">\n  Your browser does not support the video tag.\n</video>\n</p>\n\n<h4 id=\"Level-Of-Detail-LOD\"><a href=\"#Level-Of-Detail-LOD\" class=\"headerlink\" title=\"Level Of Detail (LOD)\"></a>Level Of Detail (LOD)</h4><p>Key Terms:</p>\n<ul>\n<li><strong>Level of Detail</strong>: Also known as LOD, it is the amount (level) of data (detail) you are choosing to display to the user. This is often used on far-away objects since it is the same to the user visually but faster to compute.</li>\n</ul>\n<p>Given our grid-based voxel terrain, LOD was trivial to implement on a basic level. Since our chunks are 16x16x16, LOD can be a power of two to reduce the amount of data that needs to be computed/rendered out of this chunk.</p>\n<p>As a simple example, take the following 2D grid of 16 voxels, 17 nodes:</p>\n<p><strong>Key:</strong></p>\n<ul>\n<li><strong>Purple Circles</strong>: Density data nodes.</li>\n<li><strong>Black Squares</strong>: Voxels generated from corner nodes.</li>\n</ul>\n<table width=\"100%\">\n  <tr>\n    <th>LOD of 1:</th>\n    <th>LOD of 2:</th>\n    <th>LOD of 4:</th>\n  </tr>\n  <tr>\n    <td><img src=\"/images/CubeMarchingLOD1.png\" alt=\"Cube Marching LOD 1\" width=\"100%\"/></td>\n    <td><img src=\"/images/CubeMarchingLOD2.png\" alt=\"Cube Marching LOD 2\" width=\"100%\"/></td>\n    <td><img src=\"/images/CubeMarchingLOD4.png\" alt=\"Cube Marching LOD 4\" width=\"100%\"/></td>\n  </tr>\n</table>\n\n<p>As can be seen, voxels sample from fewer nodes, but are scaled to take up the same amount of space.</p>\n<p>The LOD gradients shown below demonstrate this logic applied to the terrain.</p>\n<table width=\"100%\">\n  <tr>\n    <th>Smooth Sphere LOD Gradient:</th>\n    <th>Noisy Sphere LOD Gradient</th>\n  </tr>\n  <tr>\n    <td><img src=\"/images/LODSmoothSphere.png\" alt=\"Smooth Sphere LOD Gradient:\" width=\"500px\"/></td>\n    <td><img src=\"/images/LODNoisySphere.png\" alt=\"Noisy Sphere LOD Gradient\" width=\"500px\"/></td>\n  </tr>\n</table>\n\n<p>Despite promising results, you would need to apply an algorithm similar to <a href=\"https://transvoxel.org/\">TransVoxel</a> to implement a more sophisticated solution that doesn’t generate holes between differing LOD levels. As of currently, we do not implement this algorithm.</p>\n<!--\nTODO:\n- Resource collection\n-->\n\n<h2 id=\"Terrain-Features\"><a href=\"#Terrain-Features\" class=\"headerlink\" title=\"Terrain Features\"></a>Terrain Features</h2><h3 id=\"Terrain-Voxel-Manipulation\"><a href=\"#Terrain-Voxel-Manipulation\" class=\"headerlink\" title=\"Terrain / Voxel Manipulation\"></a>Terrain / Voxel Manipulation</h3><p>When we manipulate our voxel terrain, we alter the density values in an area of influence.<br>In our game, we use a spherical brush to accomplish this, resulting in spherical cutouts of the terrain at the target area.</p>\n<p align=\"center\">\n<video playsinline autoplay loop muted controls class=\"desktop-70-mobile-100\">\n  <source src=\"/images/VoxelManipulation.webm\" type=\"video/webm\">\n  Your browser does not support the video tag.\n</video>\n</p>\n\n<p>In the example above, you can see both additive and subtractive operations. Thankfully, these translate straightforwardly to adding and subtracting from the density values in our target area.</p>\n<p>Below is an interactive demo of the logic functioning in a 2D variant. Mouse over the area to subtract or add from a given area, altering the terrain. These values are either 1 or -1, representing a filled or unfilled area, respectively. As there is no gradient, this will result in unsmooth terrain.</p>\n<p>Click the left mouse button to toggle addition/subtraction.</p>\n<p align=\"center\"><iframe class=\"child\" src=\"https://www.openprocessing.org/sketch/1051758/embed/\" width=\"500vh\" height=\"700vh\"></iframe></p>\n\n<h3 id=\"Editor-Mode\"><a href=\"#Editor-Mode\" class=\"headerlink\" title=\"Editor Mode\"></a>Editor Mode</h3><p>Procedural generation is typically executed at runtime. In other words, our voxel terrain would only be visible upon launching the game into Play Mode.<br>However, this is problematic in the case where we would like to edit our scene. How would determine where to place a sign sticking out of the ground, or a treasure chest?<br>We’d need a way to edit the scene with the world already constructed. Our solution is editor-time world loading.  </p>\n<p>By using proximity loading of our chunks as found at runtime, we may move the player around in the scene to load whichever portion is needed to us.</p>\n<p align=\"center\">\n<video playsinline autoplay loop muted controls class=\"desktop-70-mobile-100\">\n  <source src=\"/images/EditorMode.webm\" type=\"video/webm\">\n  Your browser does not support the video tag.\n</video>\n</p>\n\n<p>We track the current state of the Unity editor to determine when to dispose of the memory or create it anew.<br>Entering play mode or edit mode will reconstruct the necessary memory for the voxel terrain.</p>\n<!--\n# Final Notes\n***TODO***\n~~In conclusion, this project produced an impressive and responsive terrain that makes for great gameplay.~~\n~~In conclusion, the signal disruptor is an award-winning board~~\n\n## Further Implementations\n- Hot-loading\n- \n-->\n\n<!---\n# ---- OTHER: ----\n## Spherical\n\n# EXTRA\n## Process of Creating a Chunk\n\nOnce a chunk entity is created and its position is assigned, it will enter the system chain to be processed in the following order\n\n## Data Generation\n## Cube Marching\n### Solution Lookup\n### Smoothing\n## Mesh Generation\nThe process of mesh generation is split into three steps:\n1) **Create Chunk Mesh**: Create the mesh object, and copy the data to the new mesh\n1) **Bake Chunk Mesh**: Bake the mesh using Unity\\'s `Physics.BakeMesh`\n1) **Set Chunk Mesh**: Create a GameObject, and assign it the new mesh.\nThe reason mesh generation is split into three distinct steps is due to the inability of steps #1 & #3 to be parallelized with burst compilation, while step #2 can be.\n### Creating the Chunk\\'s Mesh\nThis step simply creates the mesh and copies the data from the `IBufferElementData` components to the new mesh.\n\nThis is done without burst and sequentially - due to Unity\\'s `Mesh` being non-blittable.\n### Baking the Chunk\\'s Mesh\n### Setting the Chunk\\'s Mesh\n## Live Editing With Unity Atoms\n## Post Mortem\n\n- Burst-Compiled Unity Jobs\n- Chunk Loading\n- Marching Cubes\n- Unity Atoms\n---\n**NOTE**\nThe cost of using components as flags is not insignificant! The trade-off is knowing what stage any given chunk is at for debugging.\n---\n## Post Mortem\n## Unity ECS\n### Setup\nTo utilize the speed of Unity\\'s provided ECS, chunks were entities that consist of data components and their associated GameObject to store + render the mesh. Along the way, they also get tagged/untagged with \"Flag\" components to tell the next system to operate on them.\nThe ECS chunk, after processing, would contain the following component data:\n![Chunk Components](/images/ChunkComponents.png)\n\n### Why It Didn't Work \nAfter all the work setting up systems, components, and way more, it seemed like the team was constantly fighting Unity ECS to make it fit our needs. System order was impossible to configure, command buffers wouldn't execute on the frames we needed, adding and removing components correctly was complex to manage, and what could run within a system was very restrictive.\n\nDespite this, these problems were not the deal-breaker. Even if all these problems were alleviated, we needed all these systems to process chunk entities within one frame. When the player deforms the terrain, the \"frame rate of deformation\" should run at the same rate as the rest of the game. This was not the case when the systems ran across multiple frames as the deformation would run at a perceived FPS of Frame-Rate / System-Frame-Count and would look choppy.\n\n### The Fix\nLuckily, systems are very similar to Unity's job system which allowed up to transfer over easily.\n-->\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"ckkghyctz000209o14l4bd26s","tag_id":"ckkghycu1000309o12m46b7sr","_id":"ckkghycu3000509o11jv4gddx"},{"post_id":"ckkghyctz000209o14l4bd26s","tag_id":"ckkghycu2000409o126y13ld9","_id":"ckkghycu3000609o1fhuy8cno"},{"post_id":"ckkghycu7000709o13dn29yg3","tag_id":"ckkghycu2000409o126y13ld9","_id":"ckkghycua000b09o13bc07q30"},{"post_id":"ckkghycu7000709o13dn29yg3","tag_id":"ckkghycu8000909o1h5oc2zqx","_id":"ckkghycua000c09o1gn4cgkea"},{"post_id":"ckkghycu8000809o13rgx25y9","tag_id":"ckkghycu9000a09o17r9513bu","_id":"ckkghycua000d09o1cj6t0faf"},{"post_id":"ckkghycu8000809o13rgx25y9","tag_id":"ckkghycu2000409o126y13ld9","_id":"ckkghycua000e09o17pydb37c"}],"Tag":[{"name":"ImGUI","_id":"ckkghycu1000309o12m46b7sr"},{"name":"GameDev","_id":"ckkghycu2000409o126y13ld9"},{"name":"UI","_id":"ckkghycu8000909o1h5oc2zqx"},{"name":"Unity","_id":"ckkghycu9000a09o17r9513bu"}]}}